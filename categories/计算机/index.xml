<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机 on YY的主页</title>
    <link>/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/</link>
    <description>Recent content in 计算机 on YY的主页</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 14 Jul 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SpringMVC总结</title>
      <link>/blog/cs/springmvc_summary/</link>
      <pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/springmvc_summary/</guid>
      <description>I. 简介 在说什么是SpringMVC之前，我们先来说说什么是MVC三层架构。MVC是模型（Model）、视图（View）和控制器（Controller）的简写，是一种软件设计规范。它们各自的定义和分工如下：
 Model：数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao）和服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。 View: 负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。 Controller: 接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。 也就是说控制器做了个调度员的工作。  最典型的MVC就是JSP+Servlet+Javabean的模式。其中JSP负责视图部分，即展示数据；Servlet负责Controller部分，处理用户的响应和请求；而Service和Dao层用于将数据库中的数据以Java Bean的形式提取到程序中并处理相应的业务。
在了解了MVC三层架构后，我们来说说什么是SpringMVC。SpringMVC是Spring用于实现MVC框架的产品。Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。Spring 框架提供了构建Web应用程序的全功能 MVC 模块。
使用SpringMVC进行开发大大地减小了web开发难度，提升了开发效率且提升了性能。除此之外，SpringMVC还有以下优势：
 轻量级，简单易学 高效 , 基于请求响应的MVC框架 与Spring兼容性好，无缝结合（无缝集成SpringIOC和AOP） 约定优于配置 功能强大：RESTful、数据验证、格式化、本地化、主题等 简洁灵活  代码链接
II. 原理 SpringMVC工作的核心是一个DispatcherServlet类。Spring的web框架就是围绕它而设计的。简单来说，原本JavaWeb框架中，用户每发送一个请求，程序首先要找到请求对应的Servlet(因此每写一个Servlet都要在web.xml中配置)，然后再来执行这个Servlet。而在SpringMVC中，在这个过程中增加了一层类似过滤器的DispatcherServlet。当用户发送请求到服务器后，请求首先会被DispatcherServlet接收，然后由DispatcherServlet将请求转发给对应的Controller(Servlet)，当请求的业务完成后，Controller会返回一个ModelAndView对象给DispatcherServlet。接着DispatcherServlet再将这个对象发送给视图层（通常是前端），最后将相应由View层展示给用户。
SpringMVC的执行流程
SpringMVC的执行流程如下图所示。其中实线部分是其自动执行的业务，而虚线部分是我们真正需要在代码中实现的业务。
 DispatcherServlet接收到用户请求 DispatcherServlet调用HandlerMapping，由HandlerMapping根据请求的url查钊Handler HandlerExecution表示具体的Handler,接下来它会根据url查找对应的Controller 将解析后的信息传回给DispatcherServlet(如解析控制器映射等) DispatcherServlet调用HandlerAdapter(处理适配器)，它会按照特定的规则来执行Handler Handler让具体的Controller被执行（接下来是Controller调用Model层执行业务） Controller将执行结果返回给HandlerAdapter HandlerAdapter将结果返回给DispatcherServlet（ModelAndView名或者Model名） DispatcherServlet调用视图解析器来解析HandlerAdapter传递来的逻辑视图名 ViewResolver解析逻辑视图名并传回给DispatcherServlet DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图 View层将最终视图呈现给用户  从中总结我们发现DispatcherServlet主要做了以下事情：
 接收用户请求并匹配对应的Handler 找到对应的Handler后，使其调用对应的Controller从而执行业务 收到Controller的执行结果后，将其交给视图解析器ViewResolver,并将结果交给View层最终把视图展示给用户  III. 使用 1. 准备工作（配置项目）  新建一个Maven项目，导入所需要的依赖并添加web支持
&amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.12&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>Spring总结</title>
      <link>/blog/cs/spring_summary/</link>
      <pubDate>Tue, 06 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/spring_summary/</guid>
      <description>I. 简介  Spring是什么
Spring是一个开源免费的轻量级且非侵入式的框架（容器），其通过注入Bean的方式实现了控制反转IOC(Inversion of Control)和面向切面编程AOP(Aspect Oriented Programming)，并且具备对事物和其它框架（如MyBatis）的支持。
Spring的核心思想是简化开发
 为什么用Spring
  优势
 作为一个开发容器，Spring大大地简化了开发，提升了开发地效率 通过注入Bean的方式将控制从程序本身反转给了客户，使得程序的灵活性更高，改变了程序设计的逻辑 将Bean和代码分离，使得程序的耦合性降低，提升了开发的安全性和代码的可读性 通过AOP将程序解耦，使得业务和附加功能得以分离，大大地提升了开发地安全性和代码的可读性 支持多个常用的开源框架 用的人多，是经典的SSM框架的重要组成部分  劣势
 经过多年的演变，Spring已经编程了一个大杂烩，其配置已经越来越复杂，于是这时候Springboot应运而生  [代码链接][https://github.com/YYdesoul/spring5-study]
II. 组成部分 Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式 。
组成 Spring 框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。每个模块的功能如下：
 核心容器Core
核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory ，它是工厂模式的实现。BeanFactory 使用控反转（IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。
 Spring 上下文Context
Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。
 Spring AOP
通过配置管理特性，Spring AOP 模块直接将面向切面的编程功能 , 集成到了 Spring框架中。所以，可以很容易地使 Spring 框架管理任何支持 AOP的对象。Spring AOP 模块为基于Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖组件，就可以将声明性事务管理集成到应用程序中。</description>
    </item>
    
    <item>
      <title>Mybatis 总结</title>
      <link>/blog/cs/mybatis/</link>
      <pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/mybatis/</guid>
      <description>I. 简介 项目代码
1. MyBatis是什么 MyBatis是一款优秀的持久层框架。其通过使用简单的XML(或注解)和映射原生信息来取代了几乎所有的JDBC代码、手动设置参数和获取结果集的过程。为了理解什么是持久层框架，我们需要首先了解什么是持久化以及持久层。
持久化
持久化是将程序数据在持久状态和瞬时状态间转化的机制。也就是说将数据从RAM(内存)中保存到ROM(存储设备比如磁盘)中。常见的持久化机制如JDBC, IO等。持久化的本质类似于将鲜肉冷藏，吃的时候拿出来解冻。
持久层
持久层是完成持久化工作的代码块（DAO层[Data Access Object, 数据访问对象]）。数据持久化意味着将内存中的数据保存到磁盘加以固化，而持久化的实现过程则大多通过各种关系型数据库完成。
在我们的系统架构中，应该有一个相对独立的逻辑层面，专注于数据持久化逻辑的实现，也就是我们的持久层。（操作数据库的层）
2. 为什么要使用MyBatis 如上所述，MyBatis是一款用于持久层的ORM框架(Object Relationship Mapping, 对象关系映射)。框架的使用其目的往往是避免繁琐的重复代码块，减少程序员的工作量，从而提高开发效率。MyBatis也是一样，使用它可以完全代替JDBC来实现持久层的所有功能。
MyBatis的优点
 使用的人多
 *简单易学*。不需要任何第三方依赖，只需要安装两个jar文件并配置几个SQL映射文件就好。通过文档和原代码，可以很好的掌握其设计思路和实现
 *灵活*。myBatis不会对应用冲虚或者数据库的现有设计强加任何影响。SQL写在XML里，便于统一管理和优化
 *解除SQL与程序代码的耦合*。通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰、更以维护和做单元测试
 提供XML标签，支持编写动态SQL
 &amp;hellip;
  3. 文章概述 在II章节中本文会首先介绍MyBatis的工作原理。接着在III章节中介绍MyBatis项目的开发流程。第四章中会详细介绍MyBatis核心配置文件。随后的第五章节会讲解如何编写配置文件。第六章节会介绍更为简洁的注解开发。第七章介绍关系型数据库中常见的多对一、一对多处理。之后的两个章节分别介绍动态SQL和缓存。
本文环境说明：
 JDK 8+ MySQL 5.7.19 Maven-3.6.0 IDEA  学习前需要掌握：
 JDBC MySQL Java基础 Maven JUnit  II. Mybatis工作原理 III. Mybatis项目开发流程 1. 准备工作 a. 搭建Maven环境 这一步没有什么好说的，用Idea自动生成Maven项目即可。
b. 导入MyBatis依赖 找到MyBatis依赖，并配置到pom.xml中：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>Java Web</title>
      <link>/blog/cs/javaweb/</link>
      <pubDate>Sat, 19 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/javaweb/</guid>
      <description>I. 简介 互联网在我们的日常生活中已经无处不在，例如我们时常在电商网站上买东西，每个人有自己的购物车，有自己的收藏夹；我们使用社交网络网站时，每个人有自己的关注、订阅已经收藏内容等。这一切都的应用都是基于动态web的技术上。不同于仅仅用html, css和js开发的静态web网站，动态web网站提供给不同用户浏览的是不同的数据。而Java Web正是Java技术中用于动态web资源开发的的技术。
定义：Java Web，使用Java技术来解决相关web互联网领域，尤其是动态web资源开发的技术栈。web由web服务器和web客户端两个部分组成。Java在客户端的应用有Java Applet,不过使用的很少。但是在服务器端，Java的应用十分丰富，比如Servlet, JSP, 第三方框架等。
动态web的运作过程往往如下：
 用户在客户端向服务器端发送一个请求(Request)（比如请求查看一个网页） 服务器的WebServer Plugin部分接收到客户端的请求后，如果是静态资源请求，那么直接由WebServer从服务器中将静态资源提取出来；如果是动态资源请求，由Servlet/JSP将动态资源从数据库中提取并处理好并交给WebServer(比如数据库中某个用户的详细信息) 由WebServer将得到的静态/动态资源作为响应(Response)发送给客户端的用户  所以说，整个流程我们需要有一个客户端、一个服务器端。而服务器端又分为Web Server Plugin, WebServer, Servlet/JSP, 静态资源和数据库这些部分。其中Web Server Plugin部分不需要考虑；而静态资源就是html、css、js、图片、音频、视频等文件；数据库各式各样，比如MySQL, Oracle, Postgresql等，由JDBC将Java项目和这些数据库连接起来，不是本文讨论的主要内容；至于WebServer，市面上有非常成熟的产品，如ASP和Tomcat。另外，在客户端与服务器端传输中我们会用到Http协议，而Web开发中，由于要导入大量的jar包文件（Servlet包、jsp包、数据库驱动包等等），而Maven技术正是方便我们导包的实用工具，本文第II部分会详细介绍它们。所以，Web开发主要是针对Servlet/JSP，以及后台Servlet和数据库之间交互的一些算法逻辑，本文的第III部分会详细介绍他们。而文章的IV部分会详细介绍目前非常成熟且实用的MVC开发架构。第V部分会介绍一些实用的用于数据传输的小工具Ajax和Json。第VI部分中，我会详细介绍一些在Java Web开发中容易踩的一些坑和一些小技巧。
II. 相关开发工具 1. Tomcat Tomcat是Apache软件基金会的Jakarta项目中的一个核心项目，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，因为Tomcat 技术先进、性能稳定，而且免费，因 而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。
Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和 并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个Java初学web的人 来说，它是最佳的选择。
Tomcat 实际上运行JSP 页面和Servlet。其端口默认为8080。
Tomcat使用起来非常简单。我们只需要在其官网下载它并安装/解压。接着在项目中配置好，就可以启动了。
2. HTTP HTTP（超文本传输协议）是一个简单的通常运行在TCP之上的请求-响应协议。超文本主要指的是图片、音乐、视频、定位、地图等等。其端口默认为80。而更加安全的HTTPs的默认端口号为443。
Http主要有两个时代。HTTP1.0（HTTP/1.0）时代时，客户端与web服务器连接后只能获得一个web资源，之后便断开连接；HTTP2.0时代（HTTP/1.1），客户端可以与web服务器连接后，可以获得多个web资源。
HTTP分为请求和响应。
HTTP请求由客户端发起，服务器端接收。请求的方式有GET, POST, DELETE, PUT, TRACT&amp;hellip; 其中最重要的为GET和POST请求：
 get:请求能够携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但高效 post:请求能够携带的参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内容，安全，但不高效。  HTTP响应由服务器端发起，客户端接收。HTTP响应携带响应状态码，其中重要的有：
 200:请求响应成功 200 3xx:请求重定向 （重定向:你重新到我给你新位置去;）</description>
    </item>
    
    <item>
      <title>广度优先搜索算法（Breadth-First-Search）</title>
      <link>/blog/cs/algorithms_breadth-first-search/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/algorithms_breadth-first-search/</guid>
      <description>上次在介绍完功能强大的深度优先搜索算法(DFS)后，这次我来给大家介绍一下另一个功能类似且同样强大的经典算法——广度优先搜索算法 Breadth-First-Search（BFS）。
I. 算法定义 BFS同DFS一样，是一种用于遍历、搜索树或图的一种搜索算法。与DFS会先一路走到黑不同，BFS会从根节点开始搜索，在每一个路口面临分叉的时候，先把每个岔路记录下来，然后再去一个一个的往前走一步。
左下图是BFS搜索路线的一个例子。加入我们要找的是节点5。BFS首先搜索根节点0，然后会依次搜索它的两个子节点(节点1,节点2)，路线为：0-&amp;gt;1-&amp;gt;2。接着会去搜索节点1和节点2的子节点（节点3，4，5，6），所以最终路线为：0-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5。
BFS的时间复杂度为O(N + M)，N为节点的数量，M为边的数量。
II. 实现方法 由于BFS会在每个岔路口首先储存所有岔道的特性，通常BFS会和Queue（先进先出）一同使用。步骤如下：
 将根节点加入到Queue中 使用while循环，当Queue为空时，结束循环。 将Queue中的节点依次poll出来检查。 如果没有找到要找的值，就将poll出来的节点的子节点再加入到Queue中（如果没有子节点就不加）。  III. 使用场景 常见的数据结构
BFS通常在图(graph)或者二叉树(BST)(实际上BST是一种特殊的图)上使用。在图上使用时，我们往往使用HashSet或者HashMap来避免指针向回走。
常见的使用场景
1.连通块问题（Connected Component）
连通块问题是指通过一个点找到图中所联通的所有点的问题。这类问题我们可以用经典的BFS加上HashSet来解决。
2.分层遍历（Level Order Traversal）
分层遍历问题要求我们在图中按层次进行遍历，常见的分层遍历问题有简单图的最短路径问题(Simple Graph Shortest Path)
 Note: 简单图指的是每条边的距离相等，或者都视作长度为单位1的图。
 3.拓扑排序（Topological Sorting）
拓扑排序是一种对图中节点的排序。在这种排序中，假若A点指向B点，则A点的序在B点前。同一种图可能有不同的拓扑序。BFS可以用来求任意拓扑序、求一张图是否有拓扑序（如果是图中存在循环则没有拓扑序）、求字典序最小的拓扑序和求图中是否有唯一拓扑序。
在拓扑排序中，我们首先要计算出每个点的入度(In-degree)。入度指的是一共有多少条边指向这个点。用BFS解决拓扑排序问题的算法步骤如下：
a). 统计每个点的入度
b). 将入度为0的所有点放入Queue中作为起始节点
c). 依次从Queue中取出一个节点，并将它指向的点的入度-1。
d). 如果它指向的点的入度为0了，就将其添加进Queue中。
IV. 经典习题 1.连通块问题（Connected Component）
a. Number of Islands(Lintcode 433)
Description
English
Given a boolean 2D matrix, 0 is represented as the sea, 1 is represented as the island.</description>
    </item>
    
    <item>
      <title>二分查找</title>
      <link>/blog/cs/algorithms_binary-search/</link>
      <pubDate>Fri, 28 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/algorithms_binary-search/</guid>
      <description>I. 定义 二分法是一种通常用在排序数据集或者不完全排序的数据集中查寻元素的一种算法。其清晰的逻辑，简单的时间复杂度（O(logn)）使得其非常流行。
II. 二分法的思路 二分法的思路非常简单，我们用一个简单的问题来解释一下。
假设我们的问题是在一个[1, 2, 3, 4, ..., 99, 100]的数组中找到70这个数的index。解决这个问题我们最开始想到的思路就是遍历整个数组，把70和index 1, index 2, &amp;hellip;index 100 的数比较，最终找到其位置。但是我们知道，这样的算法时间复杂度为O(n), 在实际操作中是非常没有效率的。那么二分法又是怎么来解决这个问题的呢？
二分法顾名思义，就是将数据集首先从中间切开，分成左右两个子数据集。然后判断出查询的数据集在哪个子数据集中，接着对这个子数据集做这样的递归操作，直到找到要查找的对象或者数据集不可再分为止。
在数组nums = [1, 2, 3, 4, ..., 99, 100]的数组中找到target = 70这个数的index的问题中，二分法的过程是这样的：
 找到中位数也就是index为49的数——50，接着判断target是否等于它。如果等于直接返回中位数的index，如果不等于就继续。 将数组拆分为[1, 2 ,..., 49, 50]和[51, 52, ... 99, 100]两个数组。如果target大于中位数,那么对右侧的子数组再次执行一遍二分法，反之则对左侧子数组执行。 一直循环二分法下去直到找到target或者子数组无法再分为止。  III. 四重境界 二分法的使用分为四重境界。随着境界的提升，难度会加大。让我们依次来分析它们。注意，一定要使二分法不会陷入死循环。
第一境界——在排序数组上进行二分 在排序数组上使用二分法是最自然的想法，过程就如同在上述二分法思路的那样进行。模板代码如下：
Java
public int binarySearch(int[] nums, int start, int end, int target) { while (start + 1 &amp;lt; end) { int mid = start + (end - start) / 2; if (nums[mid] == target) { return mid; }else if (nums[mid] &amp;lt; target) { start = mid; } else { end = mid; } } if (nums[start] == target) { return start; } if (nums[end] == target) { return end; } return -1; }  其步骤是如下：</description>
    </item>
    
    <item>
      <title>正则表达式</title>
      <link>/blog/cs/regular-expression/</link>
      <pubDate>Sat, 15 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/regular-expression/</guid>
      <description>在编程中，我们经常遇到字符串的各种处理问题：如在字符串中找出某个子字符串，亦或者字符串是否匹配某种规则。大量繁琐的规则判断令人焦头烂额，而正则表达式（Regular Expression）正是解决此类问题的一种功能强大的武器。这篇文章介绍了正则表达式的定义、匹配规则以及在java和python中的使用。
I. 定义 正则表达式是好用字符串描述的一种匹配规则，使用正则表达式可以快速判定给定的字符串是否符合匹配规则，除此之外还可以从字符串中搜索、提取、替换等符合规则的子字符串。
举例来说，当我们想要判断一串字符串数字是否符合电话号码的数字规则时（3位区号-8位数字，如027-12345678），可以使用正则表达式：&amp;rdquo;\d{3}-\d{8}&amp;ldquo;来进行判断。
II. 匹配规则 正则表达式的匹配规则是从左向右按规则匹配，常用的匹配规则如下：
III. 在编程语言中的使用 a. Java中的使用 在java标准库java.util.regex内建了正则表达式引擎。下面我来给大家一一讲述正则表达式不同功能在java中的实现。
1. 规则匹配
String.matches(regex)函数可以直接判断当前String是否符合input中正则表达式的规则。
例子：
public class Main { public static void main(String[] args){ String re = &amp;quot;java|python&amp;quot;;	//正则表达式 System.out.println(&amp;quot;java&amp;quot;.matches(re));	//true System.out.println(&amp;quot;python&amp;quot;.matches(re));	//true System.ou..println(&amp;quot;C++&amp;quot;.matches(re));	//false } }  2. 分组匹配
我们可以用(...)来讲正则表达式划分为不同的子规则，而每个子规则就是一个分组。如果我们想提取一串字符串中符合某个子分组规则的子字符串时，可以使用分组匹配。下面我用一个例子来详细讲解分组匹配的使用方法：
import java.util.regex.*; public class Main { public static void main(String[] args){ Pattern pattern = Pattern.compile(&amp;quot;(\\d{3})\\-(\\d{8})&amp;quot;); Matcher matcher = pattern.matcher(&amp;quot;027-12345678&amp;quot;); if (matcher.matches()) {	//判断是否匹配 String whole = matcher.</description>
    </item>
    
    <item>
      <title>双指针算法之快慢指针</title>
      <link>/blog/cs/algorithms_fast-slow-points/</link>
      <pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/algorithms_fast-slow-points/</guid>
      <description>在上一篇博文中，我们讨论了左右对撞指针，今天我们来讨论另外一种双指针算法——快慢指针。
I. 定义 快慢指针是双指针算法中的一种。不同于左右对撞指针，快慢指针中的两个指针是从同一侧但以不同的策略移动的指针。因此，两个指针中会有一个移动较快的快指针（fast）和一个较慢的慢指针（slow）。当快指针移动到数组的顶端时，停止遍历或进行新一轮遍历。
Note：由于链表中指针无法往回走的特性，快慢指针在链表中使用非常频繁。遇到链表题目时，应当考虑快慢指针。
II. 实现方法 实现快慢指针算法通常分为以下几个步骤：
 将快慢两个指针指向集合的头部。 移动快指针到满足快慢指针的位置。 通过while循环使用快慢指针遍历集合。 返回结果  Note：为了避免fast指向null，有时需要将快慢指针指向集合的head的前一位。实现这个步骤，我们需要定义一个不干扰结果的对象dummy，并将它的next对象指向集合的head。
III. 经典习题 1) Remove Nth Node From End of List(Leetcode 19)
Given a linked list, remove the n-th node from the end of list and return its head.
这道题目是一道典型的在链表上使用快慢指针解决的题目。题意为输入一个链表和一个Integer n，删除其从后往前数第n位的值，并返回新的链表。n的输入永远是合规的。
这道题目的解题 思路是这样的。我们设置快慢两个指针，令快指针先走n步，再同时移动快慢指针，直到快指针走到链表的底部。这时候删除慢指针指向的后一个对象，然后返回新的链表。
Note：为了避免输入长度为1的链表，删除其中唯一的一项时，快指针会首先走一位指向null的情况出现，我们要在链表的head前增设一个dummy对象。
解题步骤如下：
 设置dummy对象其next指向head，避免fast指到null。  ListNode dummy = new ListNode(0); dummy.next = head;   设置快慢两个指针指向dummy。  ListNode slow = dummy; ListNode fast = dummy;   通过for循环让快指针先移动n次。  for (int i=0; i&amp;lt;n; i++){ fast = fast.</description>
    </item>
    
    <item>
      <title>双指针算法之左右对撞指针</title>
      <link>/blog/cs/algorithms_two-points/</link>
      <pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/algorithms_two-points/</guid>
      <description>在上一篇博文中，我们讨论了Java中指针的定义和使用。这篇文章我们就来聊一聊一种在数组和链表中很常见的算法——双指针算法。
I. 定义 双指针是指在遍历集合中的对象是，不仅仅采用单个指针进行访问，而是使用两个指针，以不同的方式对集合进行扫描从而达到相应目的的算法。一般来说，双指针的扫描方式分为两种：一种是两个指针按照相反的方向进行扫描，直到两个指针相撞为止，这类算法被称作左右对撞指针算法；另一种是两个指针按照相同的方向进行扫描，但是运动的条件不相同，在这种状况下往往一个指针走的相对快，另一个相对慢，所以这类算法被成为快慢指针算法。这篇文章专门讲解左右对撞指针，而下篇博文会专门来讲解快慢指针。
II. 分类  左右对撞指针 快慢指针  III. 左右对撞指针 a. 定义 左右对撞指针通常在有序数组（sorted array）中被使用。一般将左侧的指针定义为左指针（left），右侧的指针定义为右指针（right），然后两个指针从两头向中间进行数组的遍历。当左右指针碰撞时，也就是left&amp;gt;right时，停止遍历。
Note: 左右对撞指针适用于有序数组（sorted array）。所以在遇到有序数组时，我们应当第一个想到用左右对撞指针来解决问题。当然，在无序数组中，此方法也有应用。
b. 实现方法 实现左右对撞指针算法，通常分为以下几个步骤：
 对无序数组进行排序。 将左右指针分别指向数组的左右两端 使用while循环进行遍历，当左指针和右指针相撞时，停止。 设置左右两个指针的移动条件以及移动方式 记录结果  c. 经典习题 1) Container With Most Water（Leetcode 11)
Given n non-negative integers a1, a2, &amp;hellip;, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0).</description>
    </item>
    
    <item>
      <title>Java中的&#34;指针&#34;——引用变量</title>
      <link>/blog/cs/point/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/point/</guid>
      <description>指针是一种在众多编程语言中非常常见的概念，它的使用非常广泛。实际上，Java为了避免使用上的繁琐，其设计者用引用变量的概念代替了指针，但是实际使用上，两者比较类似，所以本文依旧以指针为题来讲述此类概念。下面我们就来介绍一下指针的概念。
在介绍指针之前，我们首先要弄清楚Java中的两大重要储存空间——堆和栈。为了使用上的方便，堆(Heap)和栈(Stack)分别用来储存不同的东西。下表对比了两者的特点：
   储存区域 储存内容 优点 缺点 回收     栈 基本类型的变量和对象的引用变量 存取速度比堆要快，仅次于寄存器，栈数据可以共享 存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。栈中主要存放一些基本类型的变量 当超过变量的作用域后，Java会自动释放掉该变量,内存空间可以立即被另作他用   堆 由new等指令创建的对象和数组 可以动态地分配内存大小，生存期也不必事先告诉编译器 由于要在运行时动态分配内存，存取速度较慢 由Java虚拟机的自动垃圾回收器来回收不再使用的数据    为了更加形象的解释这些概念，我们不妨看一看下面的例子：
A a = new A();  上述代码是在Java编程中时常会会出现的，我们来好好的分析一下，这样简单的一行代码究竟是做了什么。实际上，这小小的一行代码是做了三件事情，这行代码的前半部分申明了引用变量a为A类型，并将其储存到栈(Stack)当中并分配了一个储存地址给它, 其代码为：
A a;  接着，这行代码创建了一个新的类型为A的对象，这个过程用关键字new来实现，创建的新对象被储存在堆Heap里，并被分配了一个储存地址，其代码为：
new A();  最后，这行代码中的等号&amp;rdquo;=&amp;ldquo;将储存在堆里的引用变量a指向了栈里新创建的对象A(),这个指的过程用储存地址来实现，也就是说，等号将两个储存地址配对并连接了起来。
Note: 值得注意的是，在Java中，使用引用变量时，等号&amp;rdquo;=&amp;ldquo;并不是给等号左边的变量赋上右边的新值的意思，而是将等号左边的变量指向右边的对象的地址的意思。当人们将一个引用变量先等于对象a，再等于另一个对象b时，并不是将储存在堆(Heap)中的a对象的值改变成了b，而是将引用变量指向对象a的指针断开，接着将指针指向了对象b。下面我们用一个例子来解释这个过程：
在一个足球队中，有很多球员，而只有一个队长。有的时候，我们想要更换队长，这个例子用来实现这个过程。我们首先创建两个球员——洛里和凯恩(对象包括球员的姓，名和踢球的位置)：
Player llorris = new Player(&amp;quot;Llprris&amp;quot;, &amp;quot;Hugo&amp;quot;, &amp;quot;Goalkeeper&amp;quot;); Player kane = new Player(&amp;quot;Kane&amp;quot;, &amp;quot;Harry&amp;quot;, &amp;quot;Center Forward&amp;quot;);  其实这两行代码实现了如下图的情况：
也就是在栈(Stack)中首先申明了引用变量llorris和kane，接着在堆(Heap)中创建了两个Player对象，最后将左边的引用变量指向右边对应的对象。
这时候，我们首先将队长设置为洛里，代码为：
Player captain = llorris;  通过这行代码，我们首先申明了引用变量captain，并将其指向变量llorris指向的对象。其情况如下图所示：</description>
    </item>
    
    <item>
      <title>Git简明教程</title>
      <link>/blog/cs/git/</link>
      <pubDate>Fri, 31 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/git/</guid>
      <description>Github是目前世界上最先进的分布时版本控制系统。我们可以借助它来托管我们的项目。可以说Github是程序员必不可少的高效工具，事实上，我的博客网站正是借助Github来发布到网上的。既然Github如此重要，下面我就来介绍一下Github以及它的基础使用吧。
Github是一种分布式版本控制系统，极大的方便了开发者们存储项目以及多人开发。开发者们可以将项目上传到Github托管，然后团队中不同的人可以将项目下载到本地进行修改，完成后再将其传回到Github上，所有的修改日志都会显示在Github上，这样就极大的方便了团队共同开发项目。Github也是一个非常大的开源社区，开发者们可以在这里将自己的代码发布出来供其它人观看和使用，Github用户可以查看、星标、Fork各种各样的项目，这样的社区方便了开发者们的交流，促进了项目的发展，帮助了学者学习代码。
I. Github基础概念 下面我们首先来介绍一下Github的基础概念。
仓库（Repository）
仓库是用来存放项目代码的地方，每个项目对应一个仓库，每个Github用户可以有多个仓库。开发者们也可以对别人的项目进行关注(Watch)、收藏（Star)、复制克隆（Fork）、发起请求（Pull Request）、发送事务卡片（Issue）。下面我们来一一解释这些概念。
关注（Watch）：如果一个开发者关注了别人的项目，那么他将会收到项目的修改、更新等信息的通知。
收藏（Star）：如果一个开发者收藏了别人的项目，那么他就可以在自己的Github主页上找到这个项目的链接。
复制克隆项目（Fork）：如果一个开发者Fork了别人的仓库，那么这个仓库就会被复制到他的Github主页上，复制的仓库和原仓库是彼此独立的，开发者对复制到自己主页的仓库内容进行修改不会影响到原仓库内的项目。
发起请求（Pull Request）：发起请求是基于Fork之上的。当一个开发者Fork了别人的仓库内的项目，加以修改后想要通知原项目的Git用户代码在他的修改下被优化了，希望原用户将原项目改为他修改后的版本，就可以发送Pull Request申请。如果原项目的用户同意了，那么原项目就会被修改成新的版本。
发送事务卡片（Issue）：当一个开发者在查看别人仓库中的项目时发现了bug，可以在仓库中发送Issue来和项目开发者进行交流。
II. Git工作原理 下面我来介绍一下Git的工作原理。如上图所示，Git仓库分为本地和远程仓库两个部分，本地部分又分为三个区域：工作区、缓存区和仓库区。工作区就是我们本地对项目修改的区域；当修改完成后，我们可以将修改的内容上传，为了避免传入之后又想修改，Git会让修改的文件首先传入缓存区，当我们确定所有修改都已完成的时候，就可以将缓存区内的所有文件传入到Git本地仓库；最后，我们再将本地仓库的文件传到远程仓库即可。一般来说工作流程如下：
 使用命令git clone url(仓库地址)将项目从远程仓库下载到本地。   git clone url   修改项目代码。
 使用命令git add xxx (要添加的文件，&amp;rdquo;.&amp;ldquo;代表所有文件)将指定文件从工作区传入缓存区。
  git add xxx   使用命令git commit -m &amp;lsquo;描述&amp;rsquo;将缓存区内的所有文件传入Git本地仓库。   git commit -m &#39;描述&#39;   使用命令git remote add origin url(远程项目地址) 将Git本地仓库和Git远程仓库连接起来。   git remote add origin url   使用命令git push -u origin master 将Git本地仓库内的项目上传到Git远程仓库。   git push -u origin master  III.</description>
    </item>
    
    <item>
      <title>动态规划算法（Dynamic-Programming）</title>
      <link>/blog/cs/algorithms_dynamic_programming/</link>
      <pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/algorithms_dynamic_programming/</guid>
      <description>Those who cannot remember the past are condemned to repeat it.
 那些不记得过去的人被谴责在重复过去。正是因为人能够站在过去的经验上更进一步，才能像堆积木一样，将成就越堆越高。今天我就来讲讲一个按照这种思路所设计的算法——动态规划。
I. 定义 动态规划（Dynamic-Programming, 简称DP）是一种在数学、计算机科学、管理学和经济学等等学科中使用的一种将一个复杂问题分解为相对简单的子问题，根据子问题的结果来最终解决复杂问题的一种方法。
试想一下，如果问你1+2+3+&amp;hellip;+100 = ?这个问题时，是不是不那么容易计算出来？但是如果这个时候告诉你1+2+3+&amp;hellip;+99 = 4950时，你就能很快的知道1+2+3+&amp;hellip;+100 = 4950+100 = 5050.其实，这就是动态规划的思维。简而言之，动态规划算法的核心就是记住已经解决过的子问题的解，并根据这个解去解决相对复杂一点的问题，通过一层一层的求解，最终可以解决很复杂的问题。
下图是应用动态规划算法解决斐波那契数列的经典例子。假如问题是想计算出fib(6)的值，那么我们就必须先计算出fib(5)和fib(4)的值，要知道fib(4)的值，我们又需要先知道fib(3)和fib(2的值)，以此类推到最底层。因为我们知道fib(1)和fib(2)=1，那么可以因此求得fib(3)，然后求得fib(4)&amp;hellip;最终求得fib(6)。这整个过程就是一个动态规划的过程。
II. 实现方法 实现动态规划算法，我们往往需要四个步骤：
 选择状态变量 初始化 确定状态转移返程 储存结果  1. 选择状态变量
在这一步中，我们需要将问题拆分为多阶段的子问题。设置状态变量，其在前一阶段中被计算出来，并在后一阶段被使用。如下图所示，阶段1中的结果B, C被传入阶段2，并通过他们计算出结果D,C然后传入阶段3用于计算出最终结果F。这些变量便是状态变量。
2. 初始化
在这一步中，我们需要设置边界，也就是在什么情况下停止。在菲波那切数列中边界是fib(1)=1, fib(2)=1。
3. 确定转移方程
转移方程是一种方程，其描述了当前子问题的状态变量与上一层的状态变量之间的关系。在菲波那切数列中，转移方程就是fib(n) = fib(n-1) + fib(n-2)。
4.储存结果
在这一步中设置结果变量用于储存结果。
III. 经典习题  Unique Paths(Leetcode 62)  A robot is located at the top-left corner of a m x n grid (marked &amp;lsquo;Start&amp;rsquo; in the diagram below).</description>
    </item>
    
    <item>
      <title>深度优先搜索算法（Deep-First-Search）</title>
      <link>/blog/cs/algorithms_deep-first-search/</link>
      <pubDate>Sat, 25 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/algorithms_deep-first-search/</guid>
      <description>最近在学习算法与数据结构，在了解了费曼学习法后，我决定写一个专栏来专门讲述这方面的知识。一方面可以以讲带学最有效率的掌握知识，二来可以将知识分享给大家，除此之外在未来还可以查看他们来复习知识，真是个一举三得的事情，话不多说，我们就开始吧，今天首先从”深度优先搜索“（DFS）算法开始。
I. 算法定义 DFS是一种用于遍历、搜索树或图的一种搜索算法。搜索的灵感顾名思义：先递归下去，再回溯上来。意思是说，当人们需要在图、搜索树或者遍历中搜索某个Object时，DFS会首先一路走到底，直到不能再下，如果找到了对象，就return回去，没有找到就回溯到上一步的地方，然后换一条路继续一路走到黑重复以上过程直到找到对象或者找遍所有Object为止。
右下图是DFS在查找树上应用的例子。假如我们要找的值为节点2，DFS会首先按一个路线走到不能再走，也就是0-&amp;gt;1-&amp;gt;3。因为节点3没有子节点了，DFS会回到上一级，也就是节点1的位置，然后按照另一条路走到黑。也就是0-&amp;gt;1-&amp;gt;3-&amp;gt;4。由于4没有子节点，DFS会回到节点1，然后节点1所有的子节点都已经去过了，于是乎再回到节点0，然后去到节点2，最终找到它，路线就是0-&amp;gt;1-&amp;gt;3-&amp;gt;4-&amp;gt;2。
DFS是一种非常古老的算法，早在古希腊神话中，雅典城的英雄忒休斯正是靠着阿里阿德涅之线在米诺斯王宫找到了米诺陶诺斯之牛并杀掉它为民除害的。
II. 实现方法 通常DFS用递归(Recursion)来实现。步骤如下：
 首先设置递归的边界，当遇到边界（走到底时）停止递归。 设置递归的过程。  III. 经典习题  Same Tree (Leetcode 100)  Given two binary trees, write a function to check if they are the same or not.
Two binary trees are considered the same if they are structurally identical and the nodes have the same value.
这道题非常的简单，判断两个binary tree是否相同。按照DFS算法的思路，我们步骤如下：
 设置递归的边界，也就是当两棵树的中的一棵的节点没有子节点时，停止递归。
 如果两棵树中某个相同位置节点的值不一样，return false。
 如果两棵树中某个相同位置节点的值一样，那么执行递归, 判断此节点的左右两个子节点是否相等直到没有子节点为止。
代码
  /** * Definition for a binary tree node.</description>
    </item>
    
  </channel>
</rss>