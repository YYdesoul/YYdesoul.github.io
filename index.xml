<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>YY的主页</title>
    <link>/</link>
    <description>Recent content on YY的主页</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 31 Aug 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git简明教程</title>
      <link>/blog/cs/git/</link>
      <pubDate>Tue, 31 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/git/</guid>
      <description>Github是目前世界上最先进的分布时版本控制系统。我们可以借助它来托管我们的项目。可以说Github是程序员必不可少的高效工具，事实上，我的博客网站正是借助Github来发布到网上的。既然Github如此重要，下面我就来介绍一下Github以及它的基础使用吧。
Github是一种分布式版本控制系统，极大的方便了开发者们存储项目以及多人开发。开发者们可以将项目上传到Github托管，然后团队中不同的人可以将项目下载到本地进行修改，完成后再将其传回到Github上，所有的修改日志都会显示在Github上，这样就极大的方便了团队共同开发项目。Github也是一个非常大的开源社区，开发者们可以在这里将自己的代码发布出来供其它人观看和使用，Github用户可以查看、星标、Fork各种各样的项目，这样的社区方便了开发者们的交流，促进了项目的发展，帮助了学者学习代码。
I. Github基础概念 下面我们首先来介绍一下Github的基础概念。
仓库（Repository）
仓库是用来存放项目代码的地方，每个项目对应一个仓库，每个Github用户可以有多个仓库。开发者们也可以对别人的项目进行关注(Watch)、收藏（Star)、复制克隆（Fork）、发起请求（Pull Request）、发送事务卡片（Issue）。下面我们来一一解释这些概念。
关注（Watch）：如果一个开发者关注了别人的项目，那么他将会收到项目的修改、更新等信息的通知。
收藏（Star）：如果一个开发者收藏了别人的项目，那么他就可以在自己的Github主页上找到这个项目的链接。
复制克隆项目（Fork）：如果一个开发者Fork了别人的仓库，那么这个仓库就会被复制到他的Github主页上，复制的仓库和原仓库是彼此独立的，开发者对复制到自己主页的仓库内容进行修改不会影响到原仓库内的项目。
发起请求（Pull Request）：发起请求是基于Fork之上的。当一个开发者Fork了别人的仓库内的项目，加以修改后想要通知原项目的Git用户代码在他的修改下被优化了，希望原用户将原项目改为他修改后的版本，就可以发送Pull Request申请。如果原项目的用户同意了，那么原项目就会被修改成新的版本。
发送事务卡片（Issue）：当一个开发者在查看别人仓库中的项目时发现了bug，可以在仓库中发送Issue来和项目开发者进行交流。
II. Git工作原理 下面我来介绍一下Git的工作原理。如上图所示，Git仓库分为本地和远程仓库两个部分，本地部分又分为三个区域：工作区(workingspace)、缓存区(index)和仓库区(repository)。
 工作区(workingspace)：工作区就是我们本地对项目修改的区域 缓存区(index)：当修改完成后，我们可以将修改的内容上传，为了避免传入之后又想修改，Git会让修改的文件首先传入缓存区 本地仓库区(local repository)：当我们确定所有修改都已完成的时候，就可以将缓存区内的所有文件传入到Git本地仓库； 远程仓库区(remote repository)： 最后，我们再将本地仓库的文件传到远程仓库即可  上传代码流程
 使用命令git clone url(仓库地址)将项目从远程仓库下载到本地。   git clone url   修改项目代码。
 使用命令git add xxx (要添加的文件，&amp;rdquo;.&amp;ldquo;代表所有文件)将指定文件从工作区传入缓存区。
  git add xxx   使用命令git commit -m &amp;lsquo;描述&amp;rsquo;将缓存区内的所有文件传入Git本地仓库。   git commit -m &#39;描述&#39;   使用命令git remote add origin url(远程项目地址) 将Git本地仓库和Git远程仓库连接起来。   git remote add origin url   使用命令git push -u origin master 将Git本地仓库内的项目上传到Git远程仓库。   git push -u origin master  从远程更新本地代码</description>
    </item>
    
    <item>
      <title>SpringBoot总结</title>
      <link>/blog/cs/springboot_summary/</link>
      <pubDate>Tue, 31 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/springboot_summary/</guid>
      <description>I. 简介 代码
Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。
随着 Spring 不断的发展，涉及的领域越来越多，项目整合开发需要配合各种各样的文件，慢慢变得不那 么易用简单，违背了最初的理念，甚至人称配置地狱。Spring Boot 正是在这样的一个背景下被抽象出 来的开发框架，目的为了让大家更容易的使用 Spring 、更容易的集成各种常用的中间件、开源软件。
Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核心特性以及扩展功能，只是 用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。也就是说，它并不是用来替代 Spring 的解 决方案，而是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具。Spring Boot 以约定大于配 置的核心思想，默认帮我们进行了很多设置，多数 Spring Boot 应用只需要很少的 Spring 配置。同时它 集成了大量常用的第三方库配置(例如 Redis、MongoDB、Jpa、RabbitMQ、Quartz 等等)，Spring Boot 应用中这些第三方库几乎可以零配置的开箱即用。
简单来说就是SpringBoot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合 了所有的jar包，spring boot整合了所有的框架 。
Spring Boot的主要优点有：
 为所有Spring开发者更快的入门 开箱即用，提供各种默认配置来简化项目配置 内嵌式容器简化Web项目 没有冗余代码生成和XML配置的要求  II. 原理 SpringBoot的启动流程如下图：
SpringBoot原理的核心是自动装配。而自动装配是主启动类来启动的。
自动配置真正实现是从classpath中搜寻所有的META-INF/spring.factories配置文件 ，并将其中对应的org.springframework.boot.autoconfigure. 包下的配置项，通过反射实例化为对应标注了 @Configuration的JavaConfig形式的IOC容器配置类 ， 然后将这些都汇总成为一个实例并加载到IOC容 器中。</description>
    </item>
    
    <item>
      <title>Docker 总结</title>
      <link>/blog/cs/docker_summary/</link>
      <pubDate>Mon, 30 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/docker_summary/</guid>
      <description>I. 简介 Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。
由于本地开发好的程序往往都需要部署到服务器上进行运行，这就导致了程序需要运行在不同的环境上，这通常是一个令人头痛的事情。在过去，开发团队需要清楚的告诉运维部署团队，其所使用的全部配置文件+所有软件环境。不过，即便如此，仍然常常发生部署失败的状况。
于是乎，虚拟化技术应运而生。开发团队将开发好的程序在虚拟机上运行，这样就能解决运维的问题。但是由于虚拟机技术过重的特性导致了其资源占用多、冗余步骤多以及启动慢的缺陷。而这个时候一种新的虚拟化技术搭配上容器化的思想的产品便出现了，而它就是Docker。
下图是虚拟机技术和容器化技术架构的对比。我们可以得出以下总结：
 传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程 而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。 因此容器要比传统虚拟机更为轻便。 每个容器之间互相隔离，每个容器有自己的文件系统 ，容器之间进程不会相互影响，能区分计算资源。  于是乎相比于虚拟机技术，容器化技术具有以下优势：
 更快速的应用交付和部署
传统的应用开发完成后，需要提供一堆安装程序和配置说明文档，安装部署后需根据配置文档进行繁杂 的配置才能正常运行。Docker化之后只需要交付少量容器镜像文件，在正式生产环境加载镜像并运行即 可，应用安装配置在镜像里已经内置好，大大节省部署配置和测试验证时间
 更便捷的升级和扩缩容
随着微服务架构和Docker的发展，大量的应用会通过微服务方式架构，应用的开发构建将变成搭乐高积 木一样，每个Docker容器将变成一块“积木”，应用的升级将变得非常容易。当现有的容器不足以支撑业 务处理时，可通过镜像运行新的容器进行快速扩容，使应用系统的扩容从原先的天级变成分钟级甚至秒级
 更简单的系统运维
应用容器化运行后，生产环境运行的应用可与开发、测试环境的应用高度一致，容器会将应用程序相关 的环境和状态完全封装起来，不会因为底层基础架构和操作系统的不一致性给应用带来影响，产生新的 BUG。当出现程序异常时，也可以通过测试环境的相同容器进行快速定位和修复
 更高效的计算资源利用
Docker是内核级虚拟化，其不像传统的虚拟化技术一样需要额外的Hypervisor [管理程序] 支持，所以在 一台物理机上可以运行很多个容器实例，可大大提升物理服务器的CPU和内存的利用率
  相关网站
 Docker官网：http://www.docker.com
 Docker中文网站：https://www.docker-cn.com
 Docker Hub官网：https://hub.docker.com （仓库）
  II. 基本原理 如下图所示，Docker使用客户端-服务器（C/S）架构模式，使用远程API来管理和创建Docker容器。服务器端分为Docker daemon, Image和Container三个部分。此外还有Docker Registry。
下面首先来介绍一下Docker中的主要概念
 镜像（Image）
Docker 镜像（Image）就是一个只读的模板。镜像可以用来创建 Docker 容器，一个镜像可以创建很 多容器。 就好似 Java 中的 类和对象，类就是镜像，容器就是对象！</description>
    </item>
    
    <item>
      <title>SpringMVC总结</title>
      <link>/blog/cs/springmvc_summary/</link>
      <pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/springmvc_summary/</guid>
      <description>I. 简介 在说什么是SpringMVC之前，我们先来说说什么是MVC三层架构。MVC是模型（Model）、视图（View）和控制器（Controller）的简写，是一种软件设计规范。它们各自的定义和分工如下：
 Model：数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao）和服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。 View: 负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。 Controller: 接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。 也就是说控制器做了个调度员的工作。  最典型的MVC就是JSP+Servlet+Javabean的模式。其中JSP负责视图部分，即展示数据；Servlet负责Controller部分，处理用户的响应和请求；而Service和Dao层用于将数据库中的数据以Java Bean的形式提取到程序中并处理相应的业务。
在了解了MVC三层架构后，我们来说说什么是SpringMVC。SpringMVC是Spring用于实现MVC框架的产品。Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。Spring 框架提供了构建Web应用程序的全功能 MVC 模块。
使用SpringMVC进行开发大大地减小了web开发难度，提升了开发效率且提升了性能。除此之外，SpringMVC还有以下优势：
 轻量级，简单易学 高效 , 基于请求响应的MVC框架 与Spring兼容性好，无缝结合（无缝集成SpringIOC和AOP） 约定优于配置 功能强大：RESTful、数据验证、格式化、本地化、主题等 简洁灵活  代码链接
II. 原理 SpringMVC工作的核心是一个DispatcherServlet类。Spring的web框架就是围绕它而设计的。简单来说，原本JavaWeb框架中，用户每发送一个请求，程序首先要找到请求对应的Servlet(因此每写一个Servlet都要在web.xml中配置)，然后再来执行这个Servlet。而在SpringMVC中，在这个过程中增加了一层类似过滤器的DispatcherServlet。当用户发送请求到服务器后，请求首先会被DispatcherServlet接收，然后由DispatcherServlet将请求转发给对应的Controller(Servlet)，当请求的业务完成后，Controller会返回一个ModelAndView对象给DispatcherServlet。接着DispatcherServlet再将这个对象发送给视图层（通常是前端），最后将相应由View层展示给用户。
SpringMVC的执行流程
SpringMVC的执行流程如下图所示。其中实线部分是其自动执行的业务，而虚线部分是我们真正需要在代码中实现的业务。
 DispatcherServlet接收到用户请求 DispatcherServlet调用HandlerMapping，由HandlerMapping根据请求的url查钊Handler HandlerExecution表示具体的Handler,接下来它会根据url查找对应的Controller 将解析后的信息传回给DispatcherServlet(如解析控制器映射等) DispatcherServlet调用HandlerAdapter(处理适配器)，它会按照特定的规则来执行Handler Handler让具体的Controller被执行（接下来是Controller调用Model层执行业务） Controller将执行结果返回给HandlerAdapter HandlerAdapter将结果返回给DispatcherServlet（ModelAndView名或者Model名） DispatcherServlet调用视图解析器来解析HandlerAdapter传递来的逻辑视图名 ViewResolver解析逻辑视图名并传回给DispatcherServlet DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图 View层将最终视图呈现给用户  从中总结我们发现DispatcherServlet主要做了以下事情：
 接收用户请求并匹配对应的Handler 找到对应的Handler后，使其调用对应的Controller从而执行业务 收到Controller的执行结果后，将其交给视图解析器ViewResolver,并将结果交给View层最终把视图展示给用户  III. 使用 1. 准备工作（配置项目）  新建一个Maven项目，导入所需要的依赖并添加web支持
&amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.12&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>Spring总结</title>
      <link>/blog/cs/spring_summary/</link>
      <pubDate>Tue, 06 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/spring_summary/</guid>
      <description>I. 简介  Spring是什么
Spring是一个开源免费的轻量级且非侵入式的框架（容器），其通过注入Bean的方式实现了控制反转IOC(Inversion of Control)和面向切面编程AOP(Aspect Oriented Programming)，并且具备对事物和其它框架（如MyBatis）的支持。
Spring的核心思想是简化开发
 为什么用Spring
  优势
 作为一个开发容器，Spring大大地简化了开发，提升了开发地效率 通过注入Bean的方式将控制从程序本身反转给了客户，使得程序的灵活性更高，改变了程序设计的逻辑 将Bean和代码分离，使得程序的耦合性降低，提升了开发的安全性和代码的可读性 通过AOP将程序解耦，使得业务和附加功能得以分离，大大地提升了开发地安全性和代码的可读性 支持多个常用的开源框架 用的人多，是经典的SSM框架的重要组成部分  劣势
 经过多年的演变，Spring已经编程了一个大杂烩，其配置已经越来越复杂，于是这时候Springboot应运而生  [代码链接][https://github.com/YYdesoul/spring5-study]
II. 组成部分 Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式 。
组成 Spring 框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。每个模块的功能如下：
 核心容器Core
核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory ，它是工厂模式的实现。BeanFactory 使用控反转（IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。
 Spring 上下文Context
Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。
 Spring AOP
通过配置管理特性，Spring AOP 模块直接将面向切面的编程功能 , 集成到了 Spring框架中。所以，可以很容易地使 Spring 框架管理任何支持 AOP的对象。Spring AOP 模块为基于Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖组件，就可以将声明性事务管理集成到应用程序中。</description>
    </item>
    
    <item>
      <title>Mybatis 总结</title>
      <link>/blog/cs/mybatis/</link>
      <pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/mybatis/</guid>
      <description>I. 简介 项目代码
1. MyBatis是什么 MyBatis是一款优秀的持久层框架。其通过使用简单的XML(或注解)和映射原生信息来取代了几乎所有的JDBC代码、手动设置参数和获取结果集的过程。为了理解什么是持久层框架，我们需要首先了解什么是持久化以及持久层。
持久化
持久化是将程序数据在持久状态和瞬时状态间转化的机制。也就是说将数据从RAM(内存)中保存到ROM(存储设备比如磁盘)中。常见的持久化机制如JDBC, IO等。持久化的本质类似于将鲜肉冷藏，吃的时候拿出来解冻。
持久层
持久层是完成持久化工作的代码块（DAO层[Data Access Object, 数据访问对象]）。数据持久化意味着将内存中的数据保存到磁盘加以固化，而持久化的实现过程则大多通过各种关系型数据库完成。
在我们的系统架构中，应该有一个相对独立的逻辑层面，专注于数据持久化逻辑的实现，也就是我们的持久层。（操作数据库的层）
2. 为什么要使用MyBatis 如上所述，MyBatis是一款用于持久层的ORM框架(Object Relationship Mapping, 对象关系映射)。框架的使用其目的往往是避免繁琐的重复代码块，减少程序员的工作量，从而提高开发效率。MyBatis也是一样，使用它可以完全代替JDBC来实现持久层的所有功能。
MyBatis的优点
 使用的人多
 *简单易学*。不需要任何第三方依赖，只需要安装两个jar文件并配置几个SQL映射文件就好。通过文档和原代码，可以很好的掌握其设计思路和实现
 *灵活*。myBatis不会对应用冲虚或者数据库的现有设计强加任何影响。SQL写在XML里，便于统一管理和优化
 *解除SQL与程序代码的耦合*。通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰、更以维护和做单元测试
 提供XML标签，支持编写动态SQL
 &amp;hellip;
  3. 文章概述 在II章节中本文会首先介绍MyBatis的工作原理。接着在III章节中介绍MyBatis项目的开发流程。第四章中会详细介绍MyBatis核心配置文件。随后的第五章节会讲解如何编写配置文件。第六章节会介绍更为简洁的注解开发。第七章介绍关系型数据库中常见的多对一、一对多处理。之后的两个章节分别介绍动态SQL和缓存。
本文环境说明：
 JDK 8+ MySQL 5.7.19 Maven-3.6.0 IDEA  学习前需要掌握：
 JDBC MySQL Java基础 Maven JUnit  II. Mybatis工作原理 III. Mybatis项目开发流程 1. 准备工作 a. 搭建Maven环境 这一步没有什么好说的，用Idea自动生成Maven项目即可。
b. 导入MyBatis依赖 找到MyBatis依赖，并配置到pom.xml中：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>Java Web</title>
      <link>/blog/cs/javaweb/</link>
      <pubDate>Sat, 19 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/javaweb/</guid>
      <description>I. 简介 互联网在我们的日常生活中已经无处不在，例如我们时常在电商网站上买东西，每个人有自己的购物车，有自己的收藏夹；我们使用社交网络网站时，每个人有自己的关注、订阅已经收藏内容等。这一切都的应用都是基于动态web的技术上。不同于仅仅用html, css和js开发的静态web网站，动态web网站提供给不同用户浏览的是不同的数据。而Java Web正是Java技术中用于动态web资源开发的的技术。
定义：Java Web，使用Java技术来解决相关web互联网领域，尤其是动态web资源开发的技术栈。web由web服务器和web客户端两个部分组成。Java在客户端的应用有Java Applet,不过使用的很少。但是在服务器端，Java的应用十分丰富，比如Servlet, JSP, 第三方框架等。
动态web的运作过程往往如下：
 用户在客户端向服务器端发送一个请求(Request)（比如请求查看一个网页） 服务器的WebServer Plugin部分接收到客户端的请求后，如果是静态资源请求，那么直接由WebServer从服务器中将静态资源提取出来；如果是动态资源请求，由Servlet/JSP将动态资源从数据库中提取并处理好并交给WebServer(比如数据库中某个用户的详细信息) 由WebServer将得到的静态/动态资源作为响应(Response)发送给客户端的用户  所以说，整个流程我们需要有一个客户端、一个服务器端。而服务器端又分为Web Server Plugin, WebServer, Servlet/JSP, 静态资源和数据库这些部分。其中Web Server Plugin部分不需要考虑；而静态资源就是html、css、js、图片、音频、视频等文件；数据库各式各样，比如MySQL, Oracle, Postgresql等，由JDBC将Java项目和这些数据库连接起来，不是本文讨论的主要内容；至于WebServer，市面上有非常成熟的产品，如ASP和Tomcat。另外，在客户端与服务器端传输中我们会用到Http协议，而Web开发中，由于要导入大量的jar包文件（Servlet包、jsp包、数据库驱动包等等），而Maven技术正是方便我们导包的实用工具，本文第II部分会详细介绍它们。所以，Web开发主要是针对Servlet/JSP，以及后台Servlet和数据库之间交互的一些算法逻辑，本文的第III部分会详细介绍他们。而文章的IV部分会详细介绍目前非常成熟且实用的MVC开发架构。第V部分会介绍一些实用的用于数据传输的小工具Ajax和Json。第VI部分中，我会详细介绍一些在Java Web开发中容易踩的一些坑和一些小技巧。
II. 相关开发工具 1. Tomcat Tomcat是Apache软件基金会的Jakarta项目中的一个核心项目，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，因为Tomcat 技术先进、性能稳定，而且免费，因 而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。
Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和 并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个Java初学web的人 来说，它是最佳的选择。
Tomcat 实际上运行JSP 页面和Servlet。其端口默认为8080。
Tomcat使用起来非常简单。我们只需要在其官网下载它并安装/解压。接着在项目中配置好，就可以启动了。
2. HTTP HTTP（超文本传输协议）是一个简单的通常运行在TCP之上的请求-响应协议。超文本主要指的是图片、音乐、视频、定位、地图等等。其端口默认为80。而更加安全的HTTPs的默认端口号为443。
Http主要有两个时代。HTTP1.0（HTTP/1.0）时代时，客户端与web服务器连接后只能获得一个web资源，之后便断开连接；HTTP2.0时代（HTTP/1.1），客户端可以与web服务器连接后，可以获得多个web资源。
HTTP分为请求和响应。
HTTP请求由客户端发起，服务器端接收。请求的方式有GET, POST, DELETE, PUT, TRACT&amp;hellip; 其中最重要的为GET和POST请求：
 get:请求能够携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但高效 post:请求能够携带的参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内容，安全，但不高效。  HTTP响应由服务器端发起，客户端接收。HTTP响应携带响应状态码，其中重要的有：
 200:请求响应成功 200 3xx:请求重定向 （重定向:你重新到我给你新位置去;）</description>
    </item>
    
    <item>
      <title>广度优先搜索算法（Breadth-First-Search）</title>
      <link>/blog/cs/algorithms_breadth-first-search/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/algorithms_breadth-first-search/</guid>
      <description>上次在介绍完功能强大的深度优先搜索算法(DFS)后，这次我来给大家介绍一下另一个功能类似且同样强大的经典算法——广度优先搜索算法 Breadth-First-Search（BFS）。
I. 算法定义 BFS同DFS一样，是一种用于遍历、搜索树或图的一种搜索算法。与DFS会先一路走到黑不同，BFS会从根节点开始搜索，在每一个路口面临分叉的时候，先把每个岔路记录下来，然后再去一个一个的往前走一步。
左下图是BFS搜索路线的一个例子。加入我们要找的是节点5。BFS首先搜索根节点0，然后会依次搜索它的两个子节点(节点1,节点2)，路线为：0-&amp;gt;1-&amp;gt;2。接着会去搜索节点1和节点2的子节点（节点3，4，5，6），所以最终路线为：0-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5。
BFS的时间复杂度为O(N + M)，N为节点的数量，M为边的数量。
II. 实现方法 由于BFS会在每个岔路口首先储存所有岔道的特性，通常BFS会和Queue（先进先出）一同使用。步骤如下：
 将根节点加入到Queue中 使用while循环，当Queue为空时，结束循环。 将Queue中的节点依次poll出来检查。 如果没有找到要找的值，就将poll出来的节点的子节点再加入到Queue中（如果没有子节点就不加）。  III. 使用场景 常见的数据结构
BFS通常在图(graph)或者二叉树(BST)(实际上BST是一种特殊的图)上使用。在图上使用时，我们往往使用HashSet或者HashMap来避免指针向回走。
常见的使用场景
1.连通块问题（Connected Component）
连通块问题是指通过一个点找到图中所联通的所有点的问题。这类问题我们可以用经典的BFS加上HashSet来解决。
2.分层遍历（Level Order Traversal）
分层遍历问题要求我们在图中按层次进行遍历，常见的分层遍历问题有简单图的最短路径问题(Simple Graph Shortest Path)
 Note: 简单图指的是每条边的距离相等，或者都视作长度为单位1的图。
 3.拓扑排序（Topological Sorting）
拓扑排序是一种对图中节点的排序。在这种排序中，假若A点指向B点，则A点的序在B点前。同一种图可能有不同的拓扑序。BFS可以用来求任意拓扑序、求一张图是否有拓扑序（如果是图中存在循环则没有拓扑序）、求字典序最小的拓扑序和求图中是否有唯一拓扑序。
在拓扑排序中，我们首先要计算出每个点的入度(In-degree)。入度指的是一共有多少条边指向这个点。用BFS解决拓扑排序问题的算法步骤如下：
a). 统计每个点的入度
b). 将入度为0的所有点放入Queue中作为起始节点
c). 依次从Queue中取出一个节点，并将它指向的点的入度-1。
d). 如果它指向的点的入度为0了，就将其添加进Queue中。
IV. 经典习题 1.连通块问题（Connected Component）
a. Number of Islands(Lintcode 433)
Description
English
Given a boolean 2D matrix, 0 is represented as the sea, 1 is represented as the island.</description>
    </item>
    
    <item>
      <title>二分查找</title>
      <link>/blog/cs/algorithms_binary-search/</link>
      <pubDate>Fri, 28 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/algorithms_binary-search/</guid>
      <description>I. 定义 二分法是一种通常用在排序数据集或者不完全排序的数据集中查寻元素的一种算法。其清晰的逻辑，简单的时间复杂度（O(logn)）使得其非常流行。
II. 二分法的思路 二分法的思路非常简单，我们用一个简单的问题来解释一下。
假设我们的问题是在一个[1, 2, 3, 4, ..., 99, 100]的数组中找到70这个数的index。解决这个问题我们最开始想到的思路就是遍历整个数组，把70和index 1, index 2, &amp;hellip;index 100 的数比较，最终找到其位置。但是我们知道，这样的算法时间复杂度为O(n), 在实际操作中是非常没有效率的。那么二分法又是怎么来解决这个问题的呢？
二分法顾名思义，就是将数据集首先从中间切开，分成左右两个子数据集。然后判断出查询的数据集在哪个子数据集中，接着对这个子数据集做这样的递归操作，直到找到要查找的对象或者数据集不可再分为止。
在数组nums = [1, 2, 3, 4, ..., 99, 100]的数组中找到target = 70这个数的index的问题中，二分法的过程是这样的：
 找到中位数也就是index为49的数——50，接着判断target是否等于它。如果等于直接返回中位数的index，如果不等于就继续。 将数组拆分为[1, 2 ,..., 49, 50]和[51, 52, ... 99, 100]两个数组。如果target大于中位数,那么对右侧的子数组再次执行一遍二分法，反之则对左侧子数组执行。 一直循环二分法下去直到找到target或者子数组无法再分为止。  III. 四重境界 二分法的使用分为四重境界。随着境界的提升，难度会加大。让我们依次来分析它们。注意，一定要使二分法不会陷入死循环。
第一境界——在排序数组上进行二分 在排序数组上使用二分法是最自然的想法，过程就如同在上述二分法思路的那样进行。模板代码如下：
Java
public int binarySearch(int[] nums, int start, int end, int target) { while (start + 1 &amp;lt; end) { int mid = start + (end - start) / 2; if (nums[mid] == target) { return mid; }else if (nums[mid] &amp;lt; target) { start = mid; } else { end = mid; } } if (nums[start] == target) { return start; } if (nums[end] == target) { return end; } return -1; }  其步骤是如下：</description>
    </item>
    
    <item>
      <title>正则表达式</title>
      <link>/blog/cs/regular-expression/</link>
      <pubDate>Sat, 15 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/regular-expression/</guid>
      <description>在编程中，我们经常遇到字符串的各种处理问题：如在字符串中找出某个子字符串，亦或者字符串是否匹配某种规则。大量繁琐的规则判断令人焦头烂额，而正则表达式（Regular Expression）正是解决此类问题的一种功能强大的武器。这篇文章介绍了正则表达式的定义、匹配规则以及在java和python中的使用。
I. 定义 正则表达式是好用字符串描述的一种匹配规则，使用正则表达式可以快速判定给定的字符串是否符合匹配规则，除此之外还可以从字符串中搜索、提取、替换等符合规则的子字符串。
举例来说，当我们想要判断一串字符串数字是否符合电话号码的数字规则时（3位区号-8位数字，如027-12345678），可以使用正则表达式：&amp;rdquo;\d{3}-\d{8}&amp;ldquo;来进行判断。
II. 匹配规则 正则表达式的匹配规则是从左向右按规则匹配，常用的匹配规则如下：
III. 在编程语言中的使用 a. Java中的使用 在java标准库java.util.regex内建了正则表达式引擎。下面我来给大家一一讲述正则表达式不同功能在java中的实现。
1. 规则匹配
String.matches(regex)函数可以直接判断当前String是否符合input中正则表达式的规则。
例子：
public class Main { public static void main(String[] args){ String re = &amp;quot;java|python&amp;quot;;	//正则表达式 System.out.println(&amp;quot;java&amp;quot;.matches(re));	//true System.out.println(&amp;quot;python&amp;quot;.matches(re));	//true System.ou..println(&amp;quot;C++&amp;quot;.matches(re));	//false } }  2. 分组匹配
我们可以用(...)来讲正则表达式划分为不同的子规则，而每个子规则就是一个分组。如果我们想提取一串字符串中符合某个子分组规则的子字符串时，可以使用分组匹配。下面我用一个例子来详细讲解分组匹配的使用方法：
import java.util.regex.*; public class Main { public static void main(String[] args){ Pattern pattern = Pattern.compile(&amp;quot;(\\d{3})\\-(\\d{8})&amp;quot;); Matcher matcher = pattern.matcher(&amp;quot;027-12345678&amp;quot;); if (matcher.matches()) {	//判断是否匹配 String whole = matcher.</description>
    </item>
    
    <item>
      <title>双指针算法之快慢指针</title>
      <link>/blog/cs/algorithms_fast-slow-points/</link>
      <pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/algorithms_fast-slow-points/</guid>
      <description>在上一篇博文中，我们讨论了左右对撞指针，今天我们来讨论另外一种双指针算法——快慢指针。
I. 定义 快慢指针是双指针算法中的一种。不同于左右对撞指针，快慢指针中的两个指针是从同一侧但以不同的策略移动的指针。因此，两个指针中会有一个移动较快的快指针（fast）和一个较慢的慢指针（slow）。当快指针移动到数组的顶端时，停止遍历或进行新一轮遍历。
Note：由于链表中指针无法往回走的特性，快慢指针在链表中使用非常频繁。遇到链表题目时，应当考虑快慢指针。
II. 实现方法 实现快慢指针算法通常分为以下几个步骤：
 将快慢两个指针指向集合的头部。 移动快指针到满足快慢指针的位置。 通过while循环使用快慢指针遍历集合。 返回结果  Note：为了避免fast指向null，有时需要将快慢指针指向集合的head的前一位。实现这个步骤，我们需要定义一个不干扰结果的对象dummy，并将它的next对象指向集合的head。
III. 经典习题 1) Remove Nth Node From End of List(Leetcode 19)
Given a linked list, remove the n-th node from the end of list and return its head.
这道题目是一道典型的在链表上使用快慢指针解决的题目。题意为输入一个链表和一个Integer n，删除其从后往前数第n位的值，并返回新的链表。n的输入永远是合规的。
这道题目的解题 思路是这样的。我们设置快慢两个指针，令快指针先走n步，再同时移动快慢指针，直到快指针走到链表的底部。这时候删除慢指针指向的后一个对象，然后返回新的链表。
Note：为了避免输入长度为1的链表，删除其中唯一的一项时，快指针会首先走一位指向null的情况出现，我们要在链表的head前增设一个dummy对象。
解题步骤如下：
 设置dummy对象其next指向head，避免fast指到null。  ListNode dummy = new ListNode(0); dummy.next = head;   设置快慢两个指针指向dummy。  ListNode slow = dummy; ListNode fast = dummy;   通过for循环让快指针先移动n次。  for (int i=0; i&amp;lt;n; i++){ fast = fast.</description>
    </item>
    
    <item>
      <title>双指针算法之左右对撞指针</title>
      <link>/blog/cs/algorithms_two-points/</link>
      <pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/algorithms_two-points/</guid>
      <description>在上一篇博文中，我们讨论了Java中指针的定义和使用。这篇文章我们就来聊一聊一种在数组和链表中很常见的算法——双指针算法。
I. 定义 双指针是指在遍历集合中的对象是，不仅仅采用单个指针进行访问，而是使用两个指针，以不同的方式对集合进行扫描从而达到相应目的的算法。一般来说，双指针的扫描方式分为两种：一种是两个指针按照相反的方向进行扫描，直到两个指针相撞为止，这类算法被称作左右对撞指针算法；另一种是两个指针按照相同的方向进行扫描，但是运动的条件不相同，在这种状况下往往一个指针走的相对快，另一个相对慢，所以这类算法被成为快慢指针算法。这篇文章专门讲解左右对撞指针，而下篇博文会专门来讲解快慢指针。
II. 分类  左右对撞指针 快慢指针  III. 左右对撞指针 a. 定义 左右对撞指针通常在有序数组（sorted array）中被使用。一般将左侧的指针定义为左指针（left），右侧的指针定义为右指针（right），然后两个指针从两头向中间进行数组的遍历。当左右指针碰撞时，也就是left&amp;gt;right时，停止遍历。
Note: 左右对撞指针适用于有序数组（sorted array）。所以在遇到有序数组时，我们应当第一个想到用左右对撞指针来解决问题。当然，在无序数组中，此方法也有应用。
b. 实现方法 实现左右对撞指针算法，通常分为以下几个步骤：
 对无序数组进行排序。 将左右指针分别指向数组的左右两端 使用while循环进行遍历，当左指针和右指针相撞时，停止。 设置左右两个指针的移动条件以及移动方式 记录结果  c. 经典习题 1) Container With Most Water（Leetcode 11)
Given n non-negative integers a1, a2, &amp;hellip;, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0).</description>
    </item>
    
    <item>
      <title>Java中的&#34;指针&#34;——引用变量</title>
      <link>/blog/cs/point/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/point/</guid>
      <description>指针是一种在众多编程语言中非常常见的概念，它的使用非常广泛。实际上，Java为了避免使用上的繁琐，其设计者用引用变量的概念代替了指针，但是实际使用上，两者比较类似，所以本文依旧以指针为题来讲述此类概念。下面我们就来介绍一下指针的概念。
在介绍指针之前，我们首先要弄清楚Java中的两大重要储存空间——堆和栈。为了使用上的方便，堆(Heap)和栈(Stack)分别用来储存不同的东西。下表对比了两者的特点：
   储存区域 储存内容 优点 缺点 回收     栈 基本类型的变量和对象的引用变量 存取速度比堆要快，仅次于寄存器，栈数据可以共享 存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。栈中主要存放一些基本类型的变量 当超过变量的作用域后，Java会自动释放掉该变量,内存空间可以立即被另作他用   堆 由new等指令创建的对象和数组 可以动态地分配内存大小，生存期也不必事先告诉编译器 由于要在运行时动态分配内存，存取速度较慢 由Java虚拟机的自动垃圾回收器来回收不再使用的数据    为了更加形象的解释这些概念，我们不妨看一看下面的例子：
A a = new A();  上述代码是在Java编程中时常会会出现的，我们来好好的分析一下，这样简单的一行代码究竟是做了什么。实际上，这小小的一行代码是做了三件事情，这行代码的前半部分申明了引用变量a为A类型，并将其储存到栈(Stack)当中并分配了一个储存地址给它, 其代码为：
A a;  接着，这行代码创建了一个新的类型为A的对象，这个过程用关键字new来实现，创建的新对象被储存在堆Heap里，并被分配了一个储存地址，其代码为：
new A();  最后，这行代码中的等号&amp;rdquo;=&amp;ldquo;将储存在堆里的引用变量a指向了栈里新创建的对象A(),这个指的过程用储存地址来实现，也就是说，等号将两个储存地址配对并连接了起来。
Note: 值得注意的是，在Java中，使用引用变量时，等号&amp;rdquo;=&amp;ldquo;并不是给等号左边的变量赋上右边的新值的意思，而是将等号左边的变量指向右边的对象的地址的意思。当人们将一个引用变量先等于对象a，再等于另一个对象b时，并不是将储存在堆(Heap)中的a对象的值改变成了b，而是将引用变量指向对象a的指针断开，接着将指针指向了对象b。下面我们用一个例子来解释这个过程：
在一个足球队中，有很多球员，而只有一个队长。有的时候，我们想要更换队长，这个例子用来实现这个过程。我们首先创建两个球员——洛里和凯恩(对象包括球员的姓，名和踢球的位置)：
Player llorris = new Player(&amp;quot;Llprris&amp;quot;, &amp;quot;Hugo&amp;quot;, &amp;quot;Goalkeeper&amp;quot;); Player kane = new Player(&amp;quot;Kane&amp;quot;, &amp;quot;Harry&amp;quot;, &amp;quot;Center Forward&amp;quot;);  其实这两行代码实现了如下图的情况：
也就是在栈(Stack)中首先申明了引用变量llorris和kane，接着在堆(Heap)中创建了两个Player对象，最后将左边的引用变量指向右边对应的对象。
这时候，我们首先将队长设置为洛里，代码为：
Player captain = llorris;  通过这行代码，我们首先申明了引用变量captain，并将其指向变量llorris指向的对象。其情况如下图所示：</description>
    </item>
    
    <item>
      <title>动态规划算法（Dynamic-Programming）</title>
      <link>/blog/cs/algorithms_dynamic_programming/</link>
      <pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/algorithms_dynamic_programming/</guid>
      <description>Those who cannot remember the past are condemned to repeat it.
 那些不记得过去的人被谴责在重复过去。正是因为人能够站在过去的经验上更进一步，才能像堆积木一样，将成就越堆越高。今天我就来讲讲一个按照这种思路所设计的算法——动态规划。
I. 定义 动态规划（Dynamic-Programming, 简称DP）是一种在数学、计算机科学、管理学和经济学等等学科中使用的一种将一个复杂问题分解为相对简单的子问题，根据子问题的结果来最终解决复杂问题的一种方法。
试想一下，如果问你1+2+3+&amp;hellip;+100 = ?这个问题时，是不是不那么容易计算出来？但是如果这个时候告诉你1+2+3+&amp;hellip;+99 = 4950时，你就能很快的知道1+2+3+&amp;hellip;+100 = 4950+100 = 5050.其实，这就是动态规划的思维。简而言之，动态规划算法的核心就是记住已经解决过的子问题的解，并根据这个解去解决相对复杂一点的问题，通过一层一层的求解，最终可以解决很复杂的问题。
下图是应用动态规划算法解决斐波那契数列的经典例子。假如问题是想计算出fib(6)的值，那么我们就必须先计算出fib(5)和fib(4)的值，要知道fib(4)的值，我们又需要先知道fib(3)和fib(2的值)，以此类推到最底层。因为我们知道fib(1)和fib(2)=1，那么可以因此求得fib(3)，然后求得fib(4)&amp;hellip;最终求得fib(6)。这整个过程就是一个动态规划的过程。
II. 实现方法 实现动态规划算法，我们往往需要四个步骤：
 选择状态变量 初始化 确定状态转移返程 储存结果  1. 选择状态变量
在这一步中，我们需要将问题拆分为多阶段的子问题。设置状态变量，其在前一阶段中被计算出来，并在后一阶段被使用。如下图所示，阶段1中的结果B, C被传入阶段2，并通过他们计算出结果D,C然后传入阶段3用于计算出最终结果F。这些变量便是状态变量。
2. 初始化
在这一步中，我们需要设置边界，也就是在什么情况下停止。在菲波那切数列中边界是fib(1)=1, fib(2)=1。
3. 确定转移方程
转移方程是一种方程，其描述了当前子问题的状态变量与上一层的状态变量之间的关系。在菲波那切数列中，转移方程就是fib(n) = fib(n-1) + fib(n-2)。
4.储存结果
在这一步中设置结果变量用于储存结果。
III. 经典习题  Unique Paths(Leetcode 62)  A robot is located at the top-left corner of a m x n grid (marked &amp;lsquo;Start&amp;rsquo; in the diagram below).</description>
    </item>
    
    <item>
      <title>深度优先搜索算法（Deep-First-Search）</title>
      <link>/blog/cs/algorithms_deep-first-search/</link>
      <pubDate>Sat, 25 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/algorithms_deep-first-search/</guid>
      <description>最近在学习算法与数据结构，在了解了费曼学习法后，我决定写一个专栏来专门讲述这方面的知识。一方面可以以讲带学最有效率的掌握知识，二来可以将知识分享给大家，除此之外在未来还可以查看他们来复习知识，真是个一举三得的事情，话不多说，我们就开始吧，今天首先从”深度优先搜索“（DFS）算法开始。
I. 算法定义 DFS是一种用于遍历、搜索树或图的一种搜索算法。搜索的灵感顾名思义：先递归下去，再回溯上来。意思是说，当人们需要在图、搜索树或者遍历中搜索某个Object时，DFS会首先一路走到底，直到不能再下，如果找到了对象，就return回去，没有找到就回溯到上一步的地方，然后换一条路继续一路走到黑重复以上过程直到找到对象或者找遍所有Object为止。
右下图是DFS在查找树上应用的例子。假如我们要找的值为节点2，DFS会首先按一个路线走到不能再走，也就是0-&amp;gt;1-&amp;gt;3。因为节点3没有子节点了，DFS会回到上一级，也就是节点1的位置，然后按照另一条路走到黑。也就是0-&amp;gt;1-&amp;gt;3-&amp;gt;4。由于4没有子节点，DFS会回到节点1，然后节点1所有的子节点都已经去过了，于是乎再回到节点0，然后去到节点2，最终找到它，路线就是0-&amp;gt;1-&amp;gt;3-&amp;gt;4-&amp;gt;2。
DFS是一种非常古老的算法，早在古希腊神话中，雅典城的英雄忒休斯正是靠着阿里阿德涅之线在米诺斯王宫找到了米诺陶诺斯之牛并杀掉它为民除害的。
II. 实现方法 通常DFS用递归(Recursion)来实现。步骤如下：
 首先设置递归的边界，当遇到边界（走到底时）停止递归。 设置递归的过程。  III. 经典习题  Same Tree (Leetcode 100)  Given two binary trees, write a function to check if they are the same or not.
Two binary trees are considered the same if they are structurally identical and the nodes have the same value.
这道题非常的简单，判断两个binary tree是否相同。按照DFS算法的思路，我们步骤如下：
 设置递归的边界，也就是当两棵树的中的一棵的节点没有子节点时，停止递归。
 如果两棵树中某个相同位置节点的值不一样，return false。
 如果两棵树中某个相同位置节点的值一样，那么执行递归, 判断此节点的左右两个子节点是否相等直到没有子节点为止。
代码
  /** * Definition for a binary tree node.</description>
    </item>
    
    <item>
      <title>读《自卑与超越》有感</title>
      <link>/blog/culture/what-life-could-mean-to-you/</link>
      <pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/culture/what-life-could-mean-to-you/</guid>
      <description>在德国大学读书的最后阶段，因为各种原因，我陷入了自我极度的焦虑中。为了达到自己的目标，我拼命的努力，可是发现，人的力量似乎并不是那么强大，很多困难我并不能靠自己的努力就能解决，有时只能耐心地等待。幸运的是，在这危难的时刻，最好的朋友不厌其烦的倾听着我的抱怨，不厌其烦的开导我，并把个体心理学大师阿德勒的这本《自卑与超越》推荐给了我。读完这本书后，我竟迅速的改变了自己看世界的角度，在短时间内从焦虑和抑郁中走出。虽然我的困难一点也没有改变，我的做法依旧是努力做好自己能做的一切，但是在等待中，我却放平了心态，不再计较最终的得失，只求没有留下因未足够努力而留下的遗憾。所以，我在这里将这本书推荐给所有和我曾经一样生活在超强焦虑和压力下的人们，希望你们能和我一样，在读完这本书后，从自我的阴影中走出来。同时，这本书也是一本极佳的儿童心理教育与自我心理教育教程，我也将它推荐给天底下所有的父亲、母亲、准爸爸、准妈妈、教师、职场青年、新婚夫妻以及恋爱中的男女，这本书可能可以帮助你们更好的教育他人以及与他人合作。
这本书的原版英文名叫做：”What Life Could Mean to You“。我更想把它翻译成生命的意义是什么，或者对你来说生命的意义是什么。整本书讨论的正是生命的意义以及不同的生命意义会给人带来完全不一样的人生。作者在本书的第一章定义了真实和错误的生命意义，并说明了错误的生命意义往往是如何产生的。在第二和第三章中，本书讲述了生命的意义是如何影响我们身体与心灵的交互以及我们对自卑与优越感的看法。在第四和第五章中，作者讲述了在心理治疗中，我们该如何去找到并分析患者生命的意义。从第六章到第十章，作者介绍了他对儿童在家庭和学校的教育中，如何引导他们找到真实的生命意义或纠正错误的生命意义，以及对成人在职场和两性中找到真实的生命意义或纠正错误的生命意义，从而使得人们可以获得幸福的人生。
作者首先总结出人们总是生活在意义中的。所有事物在人类看来，它的意义就是与人类的关系。比如“木头”指的是“木头 与人类的关系”，而“石头”则意味着“作为人类生活要素之一的石头”。任何事物脱离了意义就失去了它的价值。而生命的意义就是人们活着的价值。接着，作者在研究了失败的人生和幸福的人生中归纳出了错误的生命意义和真实的生命意义的共同点。那些失败的人诸如神经失常者、罪犯、问题儿童、自杀者和性变态者——之所以失败，是由于他们缺乏同伴感和社会兴趣。“在处理有关工作、友情及性的问题时，他们不相信这些问题可以通过合作来解决。他们对于生命意义的理解是完全个人化的， 即无人可由他人的成就中获益。他们所追求的成功，事实上仅仅是一个成就虚幻的个人优越感的目标，而他们的成就也只对他们自己有意义。 归根结底，他们生命的意义都是个人化的意义。而这样的意义其实毫无意义。而真实的生命意义与其恰恰相反，他们往往具有普遍意义，也就是他们能够为众人所分享，为他人所接受。只有当一个人的生命被其他人认为是举足轻重的时候，他才有可能被称为‘天才’。在这样的生命中所传达出的意义总是告诉人们:‘生命，就意味着做出贡献。’”而一个人的生命意义决定了他的一生。
之后，作者讲述了人生中的三大约束。它们构成了我们人生中所面临的所有问题和困难。而我们的人生意义往往是从这些约束中产生的。第一大约束是资源。因为我们都生活在这个小小的星球之上，资源是有限的，如何与地球资源和睦的共存同时受它的制约就是我们生命面临的挑战。我们必须健壮体魄、发展心智，来继续我们个人在地球上的生命，确保人类的存续。第二大约束是群体。由于人类是如此的渺小，世间不存在任何一个超人可以摆脱群体的同时完美的生活下去。人类的生命能够延续，科技取得发展，全仰赖于人们的群居共存，如何更好的与他们群居共存就成为了我们生命面临的第二个挑战。第三大约束是两性。任何人类社会都主要由男人和女人一同构成。我们的一生中不得不面临爱情和婚姻。没有哪个男人或女人能够罔顾它而度过一生。这便是我们人生的第三个挑战。事实上，这三大挑战便是职业、社会与性。而个体心理学认为，人类的一切问题都可以归结为这三大主题中。“举个例子，假设有这样一个人，他的爱情生活一片空白或不尽如人意，工作上一无所长，没什么朋友，甚至以与人交往为苦。从这种种他加诸自身的局限与制约上，我们可以推测，他必定视生存为难事，认为生活中危机四伏，少有机遇，而且 常常遭遇失败的挫折。他的生命空间如此狭窄，犹如在宣示着这样的观念:‘生活即意味着保护自己免受伤害，把自己圈起来，全身而退。’反过来，我们再设想这样一个人，他拥有亲密融洽的爱情生活，工作卓有成绩，朋 友很多且交友广阔，无往不利。那么他一定是将生活看作一项创造性的使命，认为 生活提供了无数的机遇，也不会有什么闯不过的难关。他在面对生活中各种问题时 的勇气所传达的是:‘生活就是对人的兴趣，就是成为整体中的一份子，将我的力量贡献出来，谋求人类的福祉。’”
接着，作者提出人在三到七岁这个年纪是塑造其人生意义的关键时刻。而有三类孩子容易误入歧途，形成错误的人生意义。
第一类是天生拥有生理缺陷的儿童。这些身体残障和被病痛困扰的孩子往往做很多时间都比正常孩子要困难很多，甚至有时还要受到社会的怜悯、嘲笑和排斥。他们经历了太多的痛楚，除非有某个亲近的人能够引导他们将注意力从自身的种种问题转移到关注他人上，否则他们的眼里多半都只看得到自己。在我看来，不仅仅是生理缺陷儿童容易产生这类问题，样貌丑陋或体型肥胖的孩子也容易遭受这类困扰，尤其是对女性，这个社会在外表上的容忍度更低。每当我想起自己在成长时期所看到的这类孩子无辜成为同龄孩子的笑柄，不被老师关照时，我都会感叹他们的人生太艰难了。
第二类是在溺爱中长大的儿童。“这类孩子往往会认为自己的意愿就是金科玉律，一定要得到满足。他们享受着众星拱月般的照顾，却不需要为之付出任何代价，以至于渐渐将一切看作理所当然。结果就是，等到他们不再是众人关注的焦点，其他人不再优先照顾他们的感受时，巨大的失落感便席卷而来。他们开始觉得遭到了整个世界的背叛。此前的成长经历只教会他们伸手索取， 却不曾让他们学会付出，更没有告诉他们应对问题的任何其他方式。他们被身边的人照顾得如此无微不至，甚至丧失了身而为人的独立性，不知道原来自己也是可以动手做些事情的。被溺爱的孩子的主要兴趣中心只有自己，从来没能理解合作的用处与必要性。一旦遇到困难，他们唯一能想到的就是要求他人的帮助。这些曾经的宠儿从心底里坚信，只要能夺回众星拱月的地位，就能迫使其他人认识到他们是与众不同的，并且他们的一切愿望都应该得到满足。唯有如此，他们的境遇才会越来越好。 ”在我看来，样貌出众的孩子也容易出现这类问题。这类孩子很容易的就成为群体的中心，他们的一举一动备受他人瞩目，他们的诉求往往会被他人争先恐后地去满足。如果没有人正确的引导，这样的孩子可能很难为他人着想，学会付出。
第三类是被忽视的儿童。他们的生命中缺乏爱与合作，因此他们无法得知爱与合作为何物。当遭遇生命中的难题时，他们总会高估困难的程度，同时低估自己获得他人帮助与善意的能力。在他们的眼中，世界是冷漠的，毫无友善可言，而且还会一直这样冷漠无情下去。更重要的是，他们无法意识到，只要做出有益于他人的努力就可以为自身赢得喜爱与尊重。因此，他们只能就这样抱着对他人的怀疑生活，甚至无法相信自己。
这三类儿童容易塑造出错误的人生意义，进而在他们的人生中面临三大约束带来的挑战时，他们会处理得很糟糕，从而给他们带来失败的人生。因此，我们在教育中应当尽量避免这三种情形的出现。当一旦这类孩子已经或多或少被误导塑造出错误的人生意义时，唯有依赖帮助，他们才能寻找到一种对于生命更好的理解。
不同的人生意义会对我们在多方面带来不同的影响。作者指出：不同于哲学分为唯心主义派和唯物主义派，个体心理学真正关心的是心灵与身体的日常交互影响。作者认为，人生意义的不同一样会因这种影响体现在身体上。“如果一个男孩性格羞怯，那么他的羞怯就会反映到他的整体发展中。他不想进行身体锻炼，或者说，他无法想象这是自己能够做到的事情。结果就是，他绝不会有效地锻炼自己的肌肉，并会忽略一切相关的外在影响， 哪怕这些影响通常总是能刺激肌肉生长。而另一些孩子则会允许自己将兴趣投注在锻炼肌肉上，与封闭了这种兴趣的羞怯孩子比起来，他们在健身训练上所能取得的成绩会更加出色。” 在我看来，很多人都喜欢通过一个人外表中所透露的一些信息来分析他的人物性格这是有一定道理的。除了作者给出的例子以外，比如性格散漫的人往往在打扮和精神状态上显得慵懒，而常年工工整整的人往往比较守规矩。
人生意义同样会影响人对自卑感和优越感的看法。这两种感觉非常平常，存在于我们每个人的生活中，因此如何看待它们就显得至关重要。当有问题出现时，如果个体无法恰当地适应或应对，并且坚信他们一定没有办法解决，这就是自卑感的表现。实际上，自卑感本身并非异常，甚至它还是人类处境得以改善的动力之源。举例来说，只有当人们意识到自己的无知和未来进步的需要时，才可能促成科学的进步。我们每个人的人生实际上就是面对和解决一个又一个的困难。当面对困难时，正是因为我们意识到自己对困难感到自卑，我们才会努力想办法提升自己，去成长，让自己解决困难。这样我们才终究成为了最好的我们。而一旦应对困难，有人感到过度自卑，并坚信自己一定无法解决苦难从而放弃自己，终日活在怨天尤人之中，那么是很难获得成长和幸福的。优越感对于任何人来说都是一生为之追求的东西。只要一个人确定了他的优越目标，他的生活方式就不会再有偏差，一切行动都将切合这一目标。个体的习惯和行为都将精确无误地指向其所宣示的目标，无可非议。可是人有时会塑造错误的生命意义从而带来错误的目标，进而去寻求一些毫无意义的优越感。比如有的孩子为了得到老师注意，故意让成绩变得很糟，或者扰乱课堂秩序。只有这样，他们才能一直受到老师的关注，这便是错误的优越感的体现。如果在面临这类情况时，我们不去探究孩子为什么这么做，而只是一味的怪罪孩子不努力，那么情况永远都无法得到改善。在我小的时候，曾经因为成绩不好，被父母定性为不努力，不求上进，父母为了改善这种状况选择了发怒，体罚的方式。这样不旦没有解决问题，反而让我觉得他们是我的敌人，作为一个战士，我要与他们抗争到底。于是，问题愈演愈烈，直到我自己把学习重新当成是自己的目标时，这一情况才缓解。面对这类儿童，我们能做的启示不是去指责他们的行为，而是去改变他们的目标和态度。当新的目标和态度取代了那些无意义的旧目标时，他们就不会再去追求那些无意义的优越感，而是让优越感为新目标服务。
这就是作者对生命意义的分析。当我们理解了它后，不免会发现一个新的问题。当我们要帮助一个人时，我们就得明白他生命的意义是什么，那么如何去认识一个人生命的意义呢？作者给出了一种研究一个人最初的记忆的方法。“在所有的心灵表达中，最能揭示真相的是个体的记忆。记忆是人们随身携带的提示器，记录着有关他们自己的局限和各种事件的意义。世上没有“偶然的记忆”。个体接受到的印象数不胜数，人们只会从中挑选出自认为与个人问题有关的来纳入记忆，不管它们是多么的模糊不清。这些记忆代表着他们的人生故事，一个他们不断对自己重复以从中摄取温暖或舒适感的故事。这个故事可以帮助人们将注意力集中在他们的目标上，或是用过往经验中的意义来武装他们，让他们可以用一种更为可靠的、经得起考验的方式来迎接未来。”记忆不会说谎。就我个人来说，每当我和我最要好的初中同学回忆起那三年在一起的时光时，想起的所有都是欢声笑语。难道那三年中，我们就没有任何痛苦的时候吗？事实并不是这样的，只是我们当时非常快乐，日后每每在不同的环境生活不如意时，就会怀念起当年的时光。于是乎，我们的记忆自动记住了那些快乐的事情，而遗忘了那些不开心的事情。最初的记忆是对一个人来说最久远的。人不可能记住那时候所有的事情，他们会根据自己的生活方式记住自己想记住的。那么，对最初记忆的解读就能让我们理解一个人对生命的意义。
通过这些理论，作者在不同的领域——学校、青春期、犯罪及其预防、工作、社会、爱情和婚姻，讲述了分析以及纠正人生命意义的方法。
对我而言，这本书首先教会了我如何正确应对自卑感和优越感，从而使我从无尽的焦虑中走出来。读完书后，我意识到人生就是在追寻生命意义的道路上应对和解决一个又一个困难，我便不再去抱怨为什么在我身上从来是困难重重、危机四伏。我了解到正是因为有困难，生命才精彩；正是因为有自卑，我们才有奋斗的方向。另一方面，正是因为过度焦虑，导致了我选择性的记住了所有那些困难重重的记忆而忘掉了那些解决问题后成就感爆棚的时光。仔细思考后我发现，自己的生命并不是那么痛苦，甚至光彩夺目。本书也让我进一步确信了自己生命的意义，让我更加肯定生命的意义就在于为他人创造福祉，这是一件让自己、令他人都无比幸福的事情，也应该是我们一生为之奋斗的目标。我们应当学会与他人合作，在社会和群体中找到自己的位置，在家庭（两性问题）里团结和睦。除此之外，本书还让我找到了部分分析和破译他人行为并将其纠正的方法。我明白到，仅仅从表象来分析问题就如同头痛医头脚痛医脚那样是会得出错误的结论的。只有我们仔细思考人们行为背后的目的才能真正了解到人们做事的原因并加以纠正。所以说，这也是一本极具教育意义的书，教会我们培养自己，教育他人。如果读完这篇读后感的各位跃跃欲试，那就赶紧拿起书本阅读吧！</description>
    </item>
    
    <item>
      <title>计算机</title>
      <link>/itemized/cs_itemized/</link>
      <pubDate>Wed, 27 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/itemized/cs_itemized/</guid>
      <description> I. 算法与数据结构  深度优先算法 广度优先算法 动态规划算法 Java中的&amp;rdquo;指针&amp;rdquo;——引用变量 双指针算法之左右对撞指针 双指针算法之快慢指针 二分查找  II. Java开发  Java Web MyBatis总结 Spring总结 SpringMVC总结  III. 其它  正则表达式 Git简明教程  </description>
    </item>
    
    <item>
      <title>文化</title>
      <link>/itemized/wenhua/</link>
      <pubDate>Tue, 27 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/itemized/wenhua/</guid>
      <description> 两百年之风雨，德意志兴衰见证之国门——勃兰登堡门 挨打后的创新，世界第一所现代化大学——柏林洪堡大学 胜利纪念柱——一个统一的德意志，一个全新欧洲的到来  </description>
    </item>
    
    <item>
      <title>读书分享</title>
      <link>/itemized/dushu/</link>
      <pubDate>Tue, 27 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/itemized/dushu/</guid>
      <description> 读《文明之光》有感 读《自卑与超越》有感  </description>
    </item>
    
    <item>
      <title>两百年之风雨，德意志兴衰见证之国门——勃兰登堡门</title>
      <link>/blog/culture/brandenburgertor/</link>
      <pubDate>Tue, 20 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/culture/brandenburgertor/</guid>
      <description>十月真是个普天同庆的月份，五星红旗，迎风飘扬，中华大地庆祝着祖国诞辰67周年。正巧在遥远的西方，十月三日，德意志人民在德国国门——勃兰登堡门前欢快的迎接属于他们的国庆日。
勃兰登堡门，这座历史之门见证了德意志的兴与衰。从腓特烈大帝的七年战争，到拿破仑攻入德门的屈辱；曾有普鲁士的复兴，第二帝国的建立，也有第三帝国的暴掠与苏联卫兵的攻入；它注视着两德的分裂与统一，柏林墙从建立到推倒。两百多年来，勃兰登堡门一直矗立在那里，风雨与岁月下不知从何时起已成为德意志的象征。
勃兰登堡门是由普鲁士国王腓特烈·威廉二世为纪念腓特烈大帝领导下的七年战争的胜利于1788年至1791年间建造的。勃兰登堡门位于柏林市中心，门高26米，宽65.5米，深11米，是一座新古典主义风格的砂岩建筑，以雅典卫城的城门作为蓝本，设计者是普鲁士建筑师朗汉斯。门顶的中央是一尊高约5米的胜利女神雕像，女神张开翅膀，驾乘四驾马车，手持橡树花环权杖，象征着战争的胜利。
勃兰登堡门从建造之初就被赋予了重要的历史意义。七年战争，那是腓特烈大帝赢得“军事天才”和“大帝”称号的史诗之战。这位军事天才率领德意志世界里小小的普鲁士孤军对抗奥地利，俄罗斯和法兰西三大强国，取得了战争的胜利，普鲁士一跃成为欧洲五巨头（其余四国为奥地利、法国、英国和俄国）之一。他自己也成为了西方历史上比肩亚历山大大帝、凯撒、汉尼拔、拿破仑的军事人物。令人可敬的是，这位天才军事家还是一位爱好艺术，音乐，文学，哲学等的狂热学者。他曾聘请多位各大领域的文化巨匠来到他的无忧宫谈足论道，这其中包括他自己最为敬重的法国启蒙思想家伏尔泰。在战后他大兴建设普鲁士，也将普鲁士的文化推向了高潮。
就在普鲁士人还沉浸在腓特烈大帝传奇的故事中时，西边一个极具浪漫色彩的国家——法兰西爆发了改变欧洲历史的法国大革命。这场革命席卷欧洲，并在拿破仑的带领下推到了顶峰。拿破仑的军队势如破竹，德意志土地上的大大小小三百多个邦国很快都被法国军队完全占领，这其中当然也包括普鲁士，普鲁士被迫要求承担巨额战争赔款和割让大片土地。拿破仑在柏林做了两件瞩目的事情，第一件是走到腓特烈大帝的墓前说下那句“假如他还活着的话，我们就不可能在这里。”的经典名言；第二件事是将勃兰登堡门上的胜利女神拆下，运进巴黎成为他的收藏品之一。
被拆下的是胜利女神，但是德意志人民和勃兰登堡门一样并没有倒下。最终在第六次反法同盟的进攻下占领巴黎，将胜利女神运回普鲁士。不过战后摆在普鲁士国王面前的是一个在法军面前毫无抵抗力的弱小国家。此刻在勃兰登堡门前的德国也是支离破碎，德国诗人席勒曾高呼：“德意志?它在哪里?我找不到那块地方。” 席勒的朋友歌德则干脆地说道，没有一个城市，甚至没有一块地方，使我们坚定地指出，这就是德国。如果我们在维也纳这样问，答案是，这里是奥地利;如果我们在柏林提出这个问题，答案是，这里是普鲁士。德意志在哪里?这个历史性的问题，拷问着每一颗德意志的心灵。普鲁士想要复兴德意志，看来只有改革，走出自己的独特道路才能看到曙光。就在此刻，普鲁士国王威廉三世留下了那句经典名言：“这个国家必须用它精神上的力量来弥补它物质上的损失。正是因为贫穷，所以要办教育。我还从未听说过一个国家是因为办教育而办穷了的，办亡国了的。教育不仅不会使国家贫穷，恰恰相反，教育是摆脱贫困的最好手段！”就在勃兰登堡门的不远处，世界上第一所现代化大学洪堡大学建立了。普鲁士开创了义务教育和公立大学之先河。政治上，经过施泰因，哈登堡到俾斯麦的三代总理的奋斗，终于成为了欧洲不可忽视的力量。在经历艰难的普丹，普奥和普法战争后普鲁士一统德国。铁血宰相俾斯麦在击败奥地利时曾激动地高喊：“我把他们全都打败了！全部！”1871年1月18日在巴黎郊外的凡尔赛宫，不见了法国国王的踪影，却多了一群肃穆的德国人，在这里他们举行了德皇加冕仪式，普鲁士终于完成统一德国的梦想，建立了德意志第二帝国。曾几何时勃兰登堡门上的胜利女神被法国人羞辱的历史终于在这一天由德国人在凡尔赛宫以牙还牙。
历史似乎总是这样兴衰更替。就在德国人民越来越膨胀之时，德皇威廉二世免去了年迈的铁血宰相俾斯麦的权力，并在英法等强国的挤压下，主导了第一次世界大战。最终德国战败，历史惊人的相似，德国再次割让土地并偿还巨额赔款，英法等强国战后不平等的条约间接导致了德国人民又一次更激进的疯狂。在金融危机的背景下，希特勒和他的纳粹党成功上位，第二次世界大战很快便席卷全球。这一次历史上空前绝后，惨绝人寰的大战在德军兵败苏联后终究停了下来。就在苏联卫兵攻入柏林之时，一名苏联卫兵登上勃兰登堡门，并将苏联旗帜插上勃兰登堡门顶。愤怒的德国士兵在失去理智下一炮轰了出去，随着炮声一同消失的还有胜利女神。胜利女神雕像受到严重损毁，仅剩下一只马头，如今保存在柏林市麦克舍博物馆的展览厅内。
残存的马头
战败后的德国就和勃兰登堡门一样，几乎成为一片废墟。可是勃兰登堡门依旧矗立在那里，德意志人民依旧站了起来。德国在战后面对冷战格局被分为东西两德，柏林也被分为东西两个柏林，四个占区。柏林墙，这座冷战的象征就这么修在了勃兰登堡门的门口。德意志，如此沧桑的国度的统一之梦依旧无法实现。战后的德国努力着。对待历史，他们忏悔，1970年12月7日联邦总理勃兰特在华沙犹太区起义纪念碑前轰然跪下。媒体事后说道：他替那些应该跪却没有跪下的人们跪下了。面对未来，他们努力着，1954年世界杯，联邦德国在瑞士上演伯尔尼奇迹。还生活在废墟下的日耳曼战车击败了当时不可一世的匈牙利队捧得德国历史上的首座世界杯。德国人被这群战士们鼓舞了，此后他们创造了20世纪的经济奇迹，在短短的几十年里超越英法，成为欧洲第一大经济体，并成为欧盟老大。
二战中的勃兰登堡门
冷战中的勃兰登堡门
1989年11月9日德国人民走向勃兰登堡门前一同推倒了柏林墙。1990年10月3日人们在门前举行盛大庆典，45年后德意志再度统一。一个全新的德意志在勃兰登堡门的注视下又回来了。如今他们引领欧洲，续写着属于他们的新篇章~
1989年11月9日
1990年10月3日
最后附上笔者在2015年灯光节时自行拍摄的勃兰登堡门~灯光是会动的哟！可惜照片体现不出来&amp;hellip;</description>
    </item>
    
    <item>
      <title>挨打后的创新，世界第一所现代化大学——柏林洪堡大学</title>
      <link>/blog/culture/humboldtuni/</link>
      <pubDate>Tue, 20 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/culture/humboldtuni/</guid>
      <description>法国大革命，拿破仑战争，一个个耳熟能详的的故事，一个个英雄威风的故事改变着欧洲乃至人类的历史。当人们都在津津乐道浪漫的法兰西故事时，不远的德意志正承受着历史给他们带来的痛苦，恐惧。拿破仑战争中，德意志世界的三百多个邦国一触即崩，几乎就在一瞬间，德意志的国家就毫无抵抗力的败给了这支信仰民主信仰自由的革命军，即便是德意志世界里最强大之一的普鲁士也不例外。拿破仑终究还是失败了，但是普鲁士国王威廉三世面对的是一个面对强敌毫无抵抗，国家支离破碎，人民没有信仰的普鲁士和德意志。但是这位国王并没有因此自暴自弃，他坚信，只要精神不被打倒，那么一切都是可以从头再来的，于是他留下了这样一句经典名言给自己的子民们：“这个国家必须通过它精神上的力量来弥补它物质上的损失。”是呀，德意志一定会复兴，虽然德意志没有拿破仑，但是他们有歌德，有贝多芬，有康德，有着对未来天空的无限向往，德意志人并没有被打倒。不过再强的精神力也需要来面对现实，后来的普鲁士著名宰相哈登堡就这样说道：“所有的国家都必须强制性地接受这个时代的新原则，否则就死路一条！”普鲁士人最难能可贵的就是在落后挨打后立刻反思马上改革，这和远在东方的大清王朝形成了鲜明的对比，为什么最终德国人抓住了历史的机遇而清王朝却没有，这其中的确有值得我们反思的东西。1807年，普鲁士在威廉三世的领导下开始了改革，而这最重要的改革之一就是对教育的改革。德国启蒙作家莱辛曾经说道：“德意志的大学只是一些经院哲学式的神学院，它们正在行会精神、任人唯亲、裙带关系、普遍的僵化和经院哲学的败落中沉沦。”那时候的德国大学落魄不看，教授们都以自己身为德意志世界的教授而感到无奈且难过。世界上关于微积分的发明权问题直到今天还没有定论，有的人说是英国伟大的科学家牛顿，也有的人说是德国著名数学家莱布尼茨。当年当莱布尼茨声称自己发表微积分的世界更早时，不用牛顿开口，英国皇家学会就控诉莱布尼茨剽窃牛顿的成果，而德意志人虽然也站在莱布尼茨这边，可是莱布尼茨更多的认为这是自己身为德意志人的无奈，国家的分裂，落后让他无法得到世界的尊重。
坐在洪堡图书馆的笔者的随拍
“正是由于贫穷，所以要办教育。我还从来没有听说过一个国家是因为办教育办穷了、最后办亡国了的。教育不仅不会使国家贫穷，恰恰相反，教育是摆脱贫困的最好手段！”这是威廉三世为这个国家指出的一条名路，他本人也因此获得了具有哲学头脑的国王的称号。就在国王如此的表态后，德意志世界的大批有识之士振奋了，他们纷纷来到柏林，为普鲁士之复兴为德意志之复兴而努力。著名的教育家威廉·冯·洪堡这样说道：“大学是一种最高级的手段，唯有通过它，普鲁士才能为自己赢得在德意志以及全世界的尊重，从而取得在启蒙和教育上真正的世界领先地位！”于是乎在普鲁士，领导者们决定兴修大学。然而，现实依旧是残酷的，就在普鲁士准备复兴之时，英国人已将米字旗插满全世界的每个角落成为日不落帝国；法国在路易十四，拿破仑之后依旧保存着属于它的荣耀；美国，这支后起之秀也在大洋彼岸开始了属于他们的辉煌。如果这个时候普鲁士像大多数国家比如大清王朝一样，在别人已经领先你上百年的情况下，照搬这些发达国家的老路走下去，我想也就不会有后来属于德国人的辉煌了。德国哲学家费希特就曾说道：“普鲁士的解放取决于它是否能建立起一套适当的教育体系，这套体系应当是国有化的体系。”建立属于自己的改革道路，一套属于自己的教育体系也就成为了普鲁士的当务之急。和英美不同，他们的大学全部都是由私人或者教会出钱兴办的大学，大学再来培养人才改变国家。普鲁士却走了一条与先进的英美完全相反的道路，他用国家的财力来兴办大学，让每一名有读大学能力的学生都能享受免费教育，让教授都能从国家那得到充裕的资金才从事自己的研究。这也是为什么直到今天德国的大学依旧还是几乎全免的公立大学的原因。就在这样的背景下，威廉三世甚至捐出了自己的王子宫用来作为柏林大学的校舍。于是乎，弗里德里希·威廉大学又称为柏林大学，也就是后来的柏林洪堡大学就在这样的背景下孕育而生了。
19世纪德意志世界里出了很多名人，但如果有人问我对德意志对世界贡献和影响最大的人是谁，那么答案一定是康德。在文艺复兴，启蒙运动的浪潮下，欧洲人逐渐从中世纪时的愚昧，迷信，贫穷，痛苦中走了出来，开始倡导天赋人权，追求财富，逐渐过上了幸福的日子。康德就曾这样说道：“人不应该被作为手段，不应该被看做一部机器上的齿轮。人是有自我目的的，他是自主、自律、自觉、自立的，是由他自己来引导内心，是出于他自身的理智，并按他自身的意义来采取行动的。”正是出于这样对人性的定义，康德的思想影响了后来的洪堡，费希特，黑格尔，叔本华等等。而这些人之后都曾担任柏林大学的校长，并创造出了属于柏林大学的精神世界。在这个世界里培养了一批又一批思想解放，影响世界的学生。
坐落于洪堡大学门口左侧的威廉·冯·洪堡
坐落于洪堡大学门口右侧的亚历山大·冯·洪堡（威廉的弟弟）
今天我们来到柏林市菩提树下大街，远远望去，我们就能看到两位伟人一左一右坐落在柏林洪堡大学主楼大门的两旁，他们正是大名鼎鼎的洪堡兄弟。走进校园正中央的就是著名的生物学家物理学家赫尔曼·冯·亥姆霍兹，正是他在《力量的保存》一书中阐明了今天初中课本里经常提到的能量守恒定律。走进洪堡大学的主楼，映入眼帘的是我们中国人最熟悉的大思想家卡尔·马克思那句经典名言：“哲学家们只是用不同的方式解释世界，而问题在于改变世界。”走上二楼环绕四周的墙壁上悬挂着二战之前29位为世界作出杰出贡献的洪堡人，同时他们还有一个共同的身份——诺贝尔奖获得者。海森堡、赫兹、费歇尔、拜尔斯道夫、薛定谔&amp;hellip;一个个相当当的名字，不过这其中最著名的两位一定是现代物理奠基人，提出量子论的马克思·普朗克和提出相对论的阿尔伯特·爱因斯坦。除开上述所提到的改变世界的洪堡校友以外，日后带领德国完成统一的铁血宰相俾斯麦、共产主义的创始人之一恩格斯、大哲学家费尔巴哈以及大诗人海涅等等等等都出自这所大学。今天的洪堡大学在那个时代就是世界第一的大学，德国的高等教育就如同美国高等教育在今天的地位一样影响世界。这其中最重要的原因恐怕就藏在这29位诺贝尔奖获得者画像的身旁，左右两侧各有两块铁板，上面刻着洪堡当年在创办大学后离开时为这所大学所设下和定义的“洪堡大学三原则”和“洪堡科学五原则”。洪堡大学以及建立学校和后来发展学校的人们包括教授和学生们完全继承了康德对人性自主、自觉、自立的思想，这两块石板正是倡导这一切的体现。正是这两块铁板上记载的内容标志着教育新时代的来临，现代化大学的产生，柏林洪堡大学也就自然而然成为了世界上第一所现代化大学。“大学自治”、“学术自由”、“教学与科研相统一”，这就是著名的洪堡三原则，而大学内外的人们无不遵守着这三原则，即便是普鲁士的国王也无权来撼动它，哪怕是学校里出现了极其对国王不利的言论和行为，这也反应了大学的自治。而学术自由更是让学生和教授们能够去研究自己想研究的东西，而教学与科研相统一保证了学校的严谨性，专业性。短短的三条原则改变了一所学校，改变了一个民族，改变了整个世界。洪堡的科学五原则更是定义了科学是什么，并让学生们终其一生去追求着。其中第一条如是写道：“科学是某种还没有完全得出结论的东西，没有被完全发现、完全找到的东西。它取决于对真理和知识永无止境的探求过程，取决于研究、创造性以及对自我行动原则的不断反思。”的确，人类的科学史就好像是人类的一本错误史，后人不断地在纠正前人的错误，伽利略否定托勒密的地心说，牛顿否定笛卡尔的光学理论，爱因斯坦证明牛顿理论的局限性。科学是什么？洪堡给出了目前为止最好的答案。洪堡同时提到高等院校的生存条件是“孤寂”与“自由”。寂寞意味着不为政治、经济社会利益所左右，与之保持距离，强调大学在管理和学术上的民主性。在洪堡看来，自由与寂寞是相互关联、依存的，没有寂寞（独立）就没有自由。大学全部的外在组织即以这两点为依据。事实上后来发生的故事中也应征了这一点，随着希特勒以及纳粹政府的上台粉碎了洪堡所提出的“孤寂”与“自由”，柏林大学的辉煌随着爱因斯坦等人的离开也一去不复返。最后洪堡在大学创立时的演讲上说出了他本人在大学内最后一句非常具影响力的话：“Das Leben für die Wissenschaft!”（为科学而生!）
位于主楼二楼的威廉·冯·洪堡名言：科学是还没有完全找到且永远无法完全找到的东西。
德国后来居上的复兴成功就像一盏孔明灯一样给很多当时有着复兴之梦的民族和国家指明了前进的方向。后来的大清王朝洋务运动领袖李鸿章，日本明治维新领袖之一的大久保利都把自己比作是“东方俾斯麦”，在教育上更是如此。德国人开启了这种用举国之力办学的国兴科教策略，这种策略有一个特点就是将大学设立在首都内。而这也就成了还在做着复兴梦的国家的标志，在东边的沙俄不久后就在都城圣彼得堡建立了圣彼得堡国立大学，之后迁都又建立了莫斯科国立大学。在更往东的日本也建立了京都大学，之后同样是因为迁都建立了东京帝国大学，也就是今天的东京大学。在我们中国也是一样，不过更为曲折。京师大学堂在北京创立，并在日后发展为北京大学。当时的中国战乱不断，革命军在孙中山的领导下在首都广州建立中山大学。因为辛亥革命，所以在武汉建立国立武昌中山大学，后因国民政府定都南京，在南京建立国立中央大学，这也是今天南京大学的前身。可以说我们中国今天教育的格局和德国人在教育上的创新是分不开的。柏林大学无疑不论是在模式，管理，选址，还是在出产的人才上影响了全世界，成为了大学现代化的开山鼻祖。
进入洪堡大学主楼映入眼帘的马克思的名言：哲学家们只是用不同的方式解释世界，而问题在于改变世界。
二楼的诺贝尔奖获得者走廊
位于正中间的爱因斯坦和普朗克
二战过后，德国战败，柏林大学也正式更名为洪堡大学，坐落在东柏林的它也因此被苏联所占领。很多教授出于对苏联的恐惧以及领导的不善逃离洪堡大学，在美国人的支持下在西边建立了柏林自由大学。如今的洪堡大学依旧是欧洲乃至世界名校，虽然辉煌已不及当年，但它依旧发挥着它的光热，等待着属于它的再一次辉煌！
注释：本文照片全由笔者实地拍摄，质量不足请读者见谅&amp;hellip;
对本文或者对文化，历史，哲学（不一定是德国）感兴趣的读者可以直接在公众号下留言互动，笔者会认真对待您的留言并尽快回答，扫码即可添加公众号，感谢您的关注与支持。</description>
    </item>
    
    <item>
      <title>胜利纪念柱——一个统一的德意志，一个全新欧洲的到来</title>
      <link>/blog/culture/siegessaule/</link>
      <pubDate>Tue, 20 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/culture/siegessaule/</guid>
      <description>“德意志?它在哪里?我找不到那块地方。”几个世纪来一直困扰着席勒和整个德意志世界人民的问题在胜利纪念柱建成的那一刻便有了答案。胜利纪念柱，1864年原本是为普丹（普鲁士，丹麦）战争的胜利而兴建。可就在纪念柱还没完工时，普鲁士又在改变历史的普奥（奥地利）和普法（法国）战争中取得全面胜利，并在法国的凡尔赛宫，举行德皇加冕典礼，正式宣布德意志第二帝国的到来。于是胜利纪念柱便成为了三大战争胜利和第二帝国建立的象征矗立在首都柏林。
直到今天，德国人最津津乐道的历史依旧是第二帝国时期的辉煌。十九世纪是一个危机与机遇共存的时代，英国在工业革命的驱动下巩固他日不落帝国的地位；法国在是世纪初的拿破仑战争后又逐渐辉煌起来，巴黎更是取代佛罗伦萨、罗马成为艺术之都；美国在独立战争后，在这个百年逐渐登上历史的舞台；中国在鸦片战争后一蹶不振；印度，非洲，南美，澳洲等地一直扮演着被殖民的角色。似乎历史如潺潺流水静静的流淌着，强国依旧是强国，弱国依旧是弱国。
可就在此时，这潺潺流水在一瞬间成为了一道飞流直下的瀑布，一个统一的德意志在欧洲诞生了。随着德国的崛起，世界格局开始发生重大改变。大家发现原本弱小的国家也能和英法平起平坐，德意志就像一面高举的旗帜一样，大举一挥，大大小小的国家便在渴望复兴之下勇往直前。
有意思的是，这其中有两个国家在效仿德国的复兴之路时遭遇了，没有人能看出来谁成谁败，但在一场战争后一切明了了，作为战胜国的日本从此走向了现代化，而作为战败国的中国只能在混乱和无序中继续挣扎。让我们回到原本的主题上来，当年不管是中国的洋务领袖李鸿章还是日本宰相大久保利通都以东方俾斯麦而自居，可见德国的复兴对世界特别是正处在困境中的国家的影响。让我们跟随胜利纪念柱，一起回顾它和第二帝国建立的点点滴滴。
30年战争后的德意志地图
就在伟大的东法兰克国王奥托大帝走进圣彼得大教堂加冕为德意志神圣罗马帝国皇帝的那一刻，德意志的历史被推向了第一次巅峰。不过谁也没有想到的是，站在欧洲之巅的德意志人从此开始了长达900年的衰落。三十年战争，第一帝国的辉煌不再。丹麦、瑞典、法国等等邻国把德意志的领地当成了自己耀武扬威的比武场。
30年战争时期的德意志
《威斯特法利亚和约》的签署后各诸侯国自立，帝国严重分化。世上再也没有了德意志，剩下的只是版图上300多个邦国和1400多个骑士领地，共计1700多个独立政权。从柏林到瑞士，今天看上去不过是两小时飞机的路程却在当时要经过10个邦国，办10次手续，换10次货币，交10次关税，关税甚至超过了所运货物的价值。三十年战争的破坏性远比想象中的大，人口缩减到只剩下不到三分之二。威腾堡，这座今天坐落在德国萨克森安哈尔特州的城市中四分之三的人被剥夺了生命。各城镇更是遭到严重破坏，寸草不生。德意志神圣罗马帝国，这个曾经享誉欧洲的名字只剩下了最后一块遮羞布。
《自由引导人民》德拉克罗瓦画作下的法国大革命
然而即便是如此惨状，德意志人的最后一块遮羞布还是被拿掉了，而这一次入侵的又是西边那个在三十年战争就就已蹂躏过它的法兰西。法国大革命如雨后春笋般的速度席卷整个欧洲，而拿破仑·波拿巴，这个来自科西嘉的小狮子将这场革命推向了顶峰。在拿破仑那信仰自由民主的军队面前，德意志的部队溃不成军，很快被全部占领，甚至勃兰登堡门上的胜利女神都被拿破仑当作战利品运回巴黎。
拿破仑将整个鲁尔区划入法国并在此地大力发展工业。由于德意志世界大大小小300多个邦国太难管理，拿破仑就将其重新划分为30多个邦国，此举为后来德意志的统一带来了极大的方便。不过最终轰轰烈烈的大革命随着滑铁卢的战败而坠落。德意志又回来了，不过只剩下了30多个邦国。
拿破仑兵败滑铁卢
战后的德意志将何去何从？作为德意志世界最大的两个邦国奥地利和普鲁士给出了完全不同的答案。奥地利主张保持分裂，这样它就能保持其对德意志其它邦国有限的控制；而普鲁士主张统一，认为只有统一才能走出富强的道路。可分裂了多年的德意志还有统一的希望吗？
被视为经济历史学派先驱的李斯特，他的思想被视为建立“欧洲经济共同体”的理论基础
就在这时候，一个经济学家——李斯特给出了前进的方向。李斯特认为，德意志的统一应该从经济统一开始，建立关税同盟势在必行。他驾驶着马车游说各个邦国，最终普鲁士采纳了他的建议。
1834年1月1日，随着新年的到来德意志世界上焦急等待的马车突然像疯了一样飞奔起来，因为从这一天开始，再也不用受到关税的束缚，商人们像脱缰的野马一样开始了经济贸易。
有人说德意志的统一是从关税同盟开始的，我非常同意这种观点，关税同盟的意义就好比中国的隋朝修建大运河，保证了中国南北的经济统一和往来，让分裂了三百多年的中国慢慢从经济开始走向全方位的大一统，奠定了后300年的盛唐以及文化巅峰的两宋。只可惜炀帝一心只想大展宏图，超越秦皇汉武，却过于心急，建立千秋伟业之时毫不顾忌百姓感受，最终背上千古骂名，不过他对中国的巨大贡献不应该被磨灭。言归正传，经济上的统一带动了各项产业的发展，很快德意志的铁路便超过了英法，交通的便利对于经济发展来说是不言而喻的。
Made in Germany在今天成为了高品质的代名词
我们今天赞叹的“德国制造”也是在那个时候开始崛起的。在那个时代德意志的产品质量非常差，用今天的词来讲就是山寨。因为英国的产品卖得好，德意志人各种山寨英国产品，且质量之差可比今天的中国山寨可怕很多。于是英国人忍无可忍，要求从德意志进口的商品必须在其之上写上“德国制造”的商标，借此来区分产品是来自德国还是英国。“德国制造”的商标就如同德国一样在此刻浴火重生了，今天的奔驰宝马早已不是假冒山寨的代名词，而是象征着世界最高最精细的工艺。
被威廉一世捐出用来办学的太子宫，今洪堡大学教学楼
当然，经济和工业的发展离不开教育，正是在穷困潦倒的情况下，普鲁士人兴办教育，并在教育上大搞创新。开创了大教育家费希特提出的义务教育之先河。义务教育也就这样走上了历史的舞台直到今天。在当时的普鲁士，每个孩子到了特定的年龄就必须到学校上学，如果逃学几天那他的父母将面临牢狱之灾。并且普鲁士还创办了以世界第一所现代化大学柏林大学为首的各个大学。而普鲁士国王更是将王室的太子宫捐给了柏林大学办学。德意志在普鲁士的引领下正慢慢走向统一，可是似乎总还差这么最后一块儿拼图。
胜利纪念柱旁的俾斯麦雕像
就在此时，在一个名为兴奥森的小镇上，一个叫做俾斯麦的人诞生了。经过施泰因和哈登堡两代宰相的努力，普鲁士开始慢慢强大，可德意志的统一还遥遥无期。1849年普鲁士曾提出建立德意志联盟的问题却遭遇了奇耻大辱。
就在此时，俾斯麦走马上任了，他认为德国的统一必定是建立在铁与血之上的，所以他也被人称为铁血宰相。但是蛮干并不是这位铁血宰相的风格，相反他在外交上的做法很有艺术性。那个时代的欧洲，所有人都希望这种旧秩序一直保持下去，没有人希望欧洲的中部突然出现一个统一的强国形成一股新的势力，所以德意志的统一就受到外界的万般阻挠。
在这种情况下俾斯麦通过支持俄国镇压波兰起义换取了俄国的沉默，甚至作出了“绝不攻打普鲁士”的承诺；面对法国，他同意把卢森堡，瑞士法语区等地归入法国来换取法国人的沉默；对待英国，他作出普鲁士不会在海外殖民的承诺，承认英国在殖民地的权威来换取英国人的沉默。
第二帝国成立后俾斯麦建立多个双向、三角同盟以及孤立法国的示意图（GB英、F法、IT意、ÖU奥匈帝国、R俄）
俾斯麦通过各种方式和丹麦日渐矛盾深厚，并联合奥地利和丹麦开战了。丹麦被完全孤立，就这样，丹麦战败，不得不放弃两个州，普鲁士也获得了出海口，开始了海上贸易之路。
就在普奥联军共同取得胜利不到半年，普奥战争爆发了。俾斯麦算尽机关找到向奥地利开战的借口，事实上普鲁士上下都不支持对奥地利开战，可真理往往掌握在少数人手中，但由于师出无名这场战争异常艰难。不过最后普鲁士还是笑到了最后，在胜利的那一刻俾斯麦高呼：“我把他们全都打败了！全部！”普鲁士人被胜利冲昏了头脑他们想一股脑的冲进维也纳，完全占领奥地利，可他们中有一个人是清醒的。事实再次证明真理往往是掌握在少数人手中的。俾斯麦认为，一旦普鲁士占领奥地利就会引起英法俄各国的敌意，列强都不希望德国统一，一旦事情发生了，必然引起列强组织同盟摧毁普鲁士的一切努力。于是俾斯麦和奥方谈判，要求奥地利从此脱离德意志世界，不得插手德意志范围内的事务，从而确立了普鲁士在德意志世界龙头老大的地位。
普鲁士对德意志的控制日益增长，俾斯麦知道，最后一战即将到来，果然，普法战争就在这历史时刻爆发了。这场战争让我们转换一下思维叙述一下普鲁士的军方统帅毛奇，这场战役中，毛奇的新式战法发挥了决定性的作用。
在毛奇之前，大军交战最大的问题就是排兵布阵协同，兵力一旦分散就很容易被对手各个击破，而如果长队列行军几万人或者几十万人的部队头部和敌人交上火时中后方的部队可能离战场还有几十公里远且后勤保障会成为巨大问题。
历史上有很多因为通讯差协同不便导致兵败的例子，比如中国历史上明末的萨尔浒之战。大明王朝几十万大军兵分五路合围鲁尔哈赤，结果协同不利被鲁尔哈赤各个击破；再比如大金国的海陵王完颜亮率60万大军南下攻宋，庞大的行军队列的后勤保障就出了大问题，几乎所有的马匹都被征用保障后勤，事实上最后海陵王最终就是因为后方反叛最终被部将所杀，连皇帝的庙号最终都没捞到。回到这场普法战争中来，毛奇利用铁路将自己的各个部队运到合适位置，将阵型完全展开，并利用电报对每个部队进行远程指挥。
如果上面两个例子还不够形象的话，作为90后的年轻人应该明白，这就如同DOTA中的五黑全部自带飞鞋开局，打没连语音没买鞋的路人。最终的结局就是各种gank抓落单，各种全图飞，连团战都不需要就天辉胜利了。
胜利纪念柱旁的毛奇雕像
德皇加冕
1871年1月18日，一群德国人莫名的出现在了本属于法国国王的凡尔赛宫，并举行了德皇加冕仪式。就此，普鲁士一统德意志，世上再也没有普鲁士，没有巴伐利亚，没有萨克森，没有威斯特伐利亚等等，与此对应的是，德意志统一了，德意志第二帝国在欧洲轰然建立，从此德国人开始了属于他们的新纪元。他们在军事，教育，经济，科学等各方面引领世界。而为了纪念创造这历史性一刻的普丹、普奥、普法三大战争，胜利纪念柱就这样承载着历史使命建成了。在我们面前矗立的，看上去只是用石头堆砌的纪念柱，可实际上它是全德国人民在几百年的分裂中期盼着统一的到来，在战争中祈祷伟大复兴，并实现最终梦想的杰作。从三十年战争，到拿破仑战争；从关税同盟到凡尔赛登基；这历史的一幕幕就像一块块石头，将胜利砌成了。
扫码即可添加公众号，感谢您的关注与支持。对本文或者对文化，历史，哲学（不一定是德国）感兴趣的读者可以直接在公众号下留言互动，笔者会认真对待您的留言并尽快回答。笔者由衷希望通过公众号的形式和大家进行思想上的互动，找到志同道合的朋友。</description>
    </item>
    
    <item>
      <title>读《文明之光》有感</title>
      <link>/blog/culture/wenmingzhiguang/</link>
      <pubDate>Tue, 20 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/culture/wenmingzhiguang/</guid>
      <description>22岁的生日那天，最好的朋友送了我一份最好的礼物，也就是这套《文明之光》，并在这一个月的时间里对这个世界有了不一样的一些认识。表面上看这是一本记叙人类是如何从史前建立城市，使用语言到如今科技发达改变地球的文明史，实际上作者是想透过历史事实传达给我们在历史的背后总有一种力量推动着文明的发展，任何文明的前行都是在这股暗中力量的涌动下推动完成的。事实上我认为作者从一开始就为读者埋下了这个伏笔，并将这股力量的名称放在了全书最显眼的地方，没错，我想作者一定是给这股力量取名为“文明之光”。那么接下来就让我们顺着全书再来体悟一遍，这“文明之光”到底是何方神圣。
如同现实世界里光有三原色一样，“文明之光”也有它的三原色。我们作者在本书的前言中将本书划分为历史、科技、艺术和政治四个部分。在我看来历史贯穿整个丛书，科技史、艺术史和政治史都是历史的一部分。所以我们将历史抛开，而科技、艺术和政治恰好就是“文明之光”的红、绿、蓝。 让我们先从科技开始领略这神秘的文明之光。本作首先介绍了古埃及，美索不达米亚，中国，希腊以及罗马文明为世界做出的科技贡献。表面上各文明都盛极一时，都有自己独特的发明，但其中似乎已经种下了一些成败的引子。我们不妨将本书中关于科技最具特点的例子一一抽出加以分析。第一个例子我想就是数学。诚然在古希腊同时期甚至更早在其它文明也在数学上取得了辉煌的成就，但是这一切和欧几里得建立的一套研究几何学的方法相比就显得暗淡许多。在欧几里得写下《几何原本》以后，人们都可以遵循他的方法，严格的在他定义的最基本的五条公设的基础上证明一切定理，让后世的人可以不断踩在前人的肩膀上继续研究，这一方法后来也成为了建立任何知识体系的典范。让我们在把目光投向其它文明，他们大多是一些经验的总结，比如埃及人在建造金字塔时运用到了数学知识，从而在经验上一点一点总结出几何知识，然后他们并没有建立一套研究方法，后人只能是继承前人得出的结论。为什么中国清代的数学家估算圆周率并不比祖聪之更准确？因为在包括中国、埃及在内的其它文明缺乏完整的理论体系，且时常将问题和定理定律混为一谈，这样后人就很难继承前人的工作，在前人的基础上继续更深入的对这门学科展开研究，而只能是重新再来。而古希腊人就不一样了，他们可以站在一切五条公设以及基于五条公设的基础上去猜想并证明这些猜想的正确性。简而言之，古希腊人拥有一套完备的数学体系，而其它文明仅仅是获得了前人的数学经验。
我们再从数学的眼光挪开，看一看科学的例子。其实在数学上已经能找到西方一些与众不同的引子，这就是将自然科学各学科分门别类，对每个学科都建立起一整套系统的体系。而在其它文明大多将自然科学混为一谈不方便研究。除此之外从亚里士多德到笛卡尔，西方人一步一步找到了发展科学的方法。首先是亚里士多德开创了归纳方法研究的先河，在世界各地收集大量的信息和动植物样本归纳出各个学科的规律性。而笛卡尔首先是强调了“批判的怀疑”在科学研究的重要性。不相信权威，大胆假设，小心求证，在这基础上他建立了一套科学发展的规律： 1.首先提出问题； 2.然后进行试验； 3.从试验中得到结论和解释； 4.将结论推广并且普遍化； 5.在实践中找出新的问题，如此循环往复。 书中用拉瓦西发现氧气，提出氧气助燃的学说的过程来验证这套方法让我觉得非常形象。当时学术界流行着“燃素说”，就是燃烧是因为物质中具有燃素，而燃烧的过程就是物质释放燃素的过程。首先他对无法证实的命题“燃素说”进行怀疑，不管是谁说的，并展开实验。如果命题为真，那么燃烧之后，随着燃素的释放，灰烬的质量应该减少。而事实上燃烧的生成物质量却增加了，这说明一定有新的东西加入到了燃烧的产物中。而后通过严格的检测，确定是一种气体加入了进来，并将这种气体命名为氧气。接着再将结论发表和推广。正是在这套方法体系下，西方涌现出了一系列的科学家，牛顿，爱因斯坦等等。而他们借助这套体系创造了一个又一个的科学奇迹，如书中介绍的电、原子能、希格斯场和波色子，以及建立在科学技术上发明的交通和通讯、航天以及互联网产业。
就算我们将目光转移到工艺制作上，我们依然能通过深入的分析体会到一套研究体系的重要性。我们不妨先来看看书中所介绍的瓷器史。伟大的中华文明发明了人造的奇迹——瓷器。不论是宋代的官、哥、钧、定窑瓷器，还是元明清时期的青花瓷无不体现出中华文明的璀璨，也让明清帝国赚足了腰包，将欧洲人地理大发现所挖来的银矿换来一大半。不过就在欧洲人看红眼时，他们展开了深入的研究，伯特格尔足足花了四年的时间，做了3万多次试验，他不仅记录了全部的试验过程和结果，而且把每一次试验之间的细小差异全都记录下来，终于掌握了这种当时在欧洲价格等同黄金的瓷器的制造秘密。大家可能觉得这个故事非常眼熟，因为我们从小都是听安迪生发明白炽灯的故事长大的，其实众多的科学发现和欧洲人再发明瓷器的过程如出一辙。由于有完整的数据记录，我们现在才能轻而易举地复制欧洲历史上任何一件名瓷，但是中国的很多工艺却免不了“发明、失传、再发明、再失传”的轮回。师傅们在教授徒弟时都运用了猫教老虎的方式，凡事留一手，且没有详细的技术记录。于是技术就像金庸小说里的武功一样，一代一代的失传，于是小说里再无九阴真经、独孤九剑，现实中再也无法制出宋代汝瓷。
在数学、科学和工艺工业的发展上我们不尽都找到了有关科技发展背后相同的本质。那就是在学习或者研究中我们想要不断地前行首先不能相信任何权威。我们不能因为亚里士多德是这样说的，就认为真理就是这样的。事实上中世纪人也正因为这么去考虑问题所以他们的科技并不比古希腊、古罗马时高超。任何事情我们都要通过自己的思考、实验和验证中得到答案，永远不要相信什么东西是一定正确的。第二，我们在学习或研究中最重要的并不是获得何等伟大的结论结果，而是要总结出一套成熟的方法体系，并在此方法体系的基础上一步一步去完善我们的理论，让学说得以不停地前进而不是一遍又一遍的推倒重来。第三，在论证一件事情的正确性时，我们应当不厌其烦的去实验实践，更重要的一点是，一定要把所有的收获都详细的记录下来，不然在不久的将来，我们的所获会随着时间的流逝一起消散掉。
科技是一个很大的命题，很多人可能会认为，这辈子我都不会涉足科学研究，那么这些本质经验对自身来说也毫无意义。但我想说的是，科技和我们的学习可谓异曲同工之妙。在这里我要强调我所说的学习并不仅仅是学习书本上的知识，更重要的是在生活中，在社会中对于生存、致富、思想上、价值观上等等的学习。首先，并不是因为书上是这么写的，老师是这么教的我们就认为这是真相或者结论一定正确。事实上不管是人还是书上的观点都有它产生的背景，这个背景既导致了这个观点的局限，也让这个观点没办法客观的去评判这件事情。这就好比在科学发展史上，即便是伟大的牛顿，他在很多科学领域都卓有成果，但是由于当时蒸汽机时代还未到来，他也就受此背景的影响不可能在热力学上硕果累累。
至于无法客观的评判事件，这就好比很多德国人都无法站在中国人的角度去思考问题。所以才会有前段时间斯图加特大学校长认为中国学生都非常讨厌且无法理解的怪毛病，他所提到的最大的怪毛病就是中国人不把时间花在繁忙的学习上，居然不像正常人一样买速冻食品放在烤箱里烤了吃而一定要自己购买食物的原材料麻烦的去烹饪，导致厨房油烟大等这种本不会产生的麻烦。试想一个正常的德国人他可能也不会多想，且认同这位校长的权威，并觉得中国人都是怪物，都是麻烦制造者。当然也不全是所有的德国人这么想，笔者的一位德国好友就在不久前不解的问我为什么中国人都身材较好，不像欧美人容易发福。于是我细细告诉了他中国人一日三餐的饮食习惯和中国多样化的蔬菜种类。大家认为这些其实再平常不过了，可是德国人并不这么认为，据我朋友介绍，德国人并没有规律的一日三餐，都是饿了就吃，平时也没有正餐和旁餐之分，而且他们的蔬菜种类非常少。在聊天的最后我仅仅是带这位德国朋友在学校旁最便宜的面馆吃了一碗炸酱面，他居然感动到哭了，好吃到无法忘怀，回了家还私信一定要我将面的名字发给他存起来，他好以后能经常再吃。正是因为他对别国文化的尊重与包容，而不是坚信自己国家人民的习俗和习惯一定是最好的，最终能吃到这辈子都很难吃到的美味。所以我们不应该相信任何权威，而是通过自己的方式去找寻答案。
第二，我们并不要太看重我们所取得的成就比如考上了某某大学，在某某房产或者股票中大赚了一笔，而应该着重于去分析在成功或者失败背后的原因，进而形成自己的一套炒房、炒股、学习、思考等等领域的体系，这样就能在体系中不断地完善自己在各个领域的知识，从而让自己能够不停的进步，而不是今天大赚一笔，明天血本无归；今天考试满分，明天卷子飘红；从而导致我们的财富、价值观、思想高度不停地推倒重来。
第三我想说的就是记录在我们日常生活中同样重要。正是因为我认识到了记录的重要性，所以才会在这里写下这篇观后感。也许你可以读很多书，有很多耐人寻味的经历，但是如果不去记录，你所获得的大部分知识和经历都会随着时间的推移慢慢忘却。而在困难来临之际，你不得不又得大费周章的去把这些你已淡忘的知识和经历重新捡起来再去使用。</description>
    </item>
    
    <item>
      <title>朴素贝叶斯</title>
      <link>/blog/ai/naive_bayes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/blog/ai/naive_bayes/</guid>
      <description>朴素贝叶斯 朴素贝叶斯是一种统计类机器学习算法。此算法是以假设特征之间相互独立（朴素）为条件，并运用贝叶斯定理为数学基础的概率分类器。主要用于解决分类问题。
本文将从数学理论、工程技巧以及代码实现这三个方面来讲述朴素贝叶斯算法，并以kaggle项目垃圾邮件分类为例子进行分析与解释。
I. 数学理论 1.基础数学理论 理解朴素贝叶斯我们需要首先掌握以下数学理论：
a. 概率
概率是0到1之间的实数，是对事件放生可能性的度量。其数学符号为P(x)。x表示事件，P(x)表示x事件发生的概率。举例而言，x表示明天是晴天，那么P(x) = 0.9就表示明天是晴天的概率为90%。
b. 条件概率
条件概率表示的是某事件在另一个事件已经发生了的条件下发生的概率。其数学符号为P(A|B)。A和B是两个事件，P(A|B)表示事件A在事件B已经发生下发生的概率。比如说A事件为小明去操场踢足球，B事件为下雨，那么P(A|B) = 0.01就表示小明在天已经开始下雨的条件下还去踢足球的概率为1%。
c. 基础概率公式
1). $$ P(A \cap B) = P(B \cap A) $$
2). $$ P(A|B) * P(B) = P(A \cap B) $$
3) 如何A和B两个事件彼此独立，那么：$$ P(A \cap B) = P(A) \ast P(B) $$
d. 贝叶斯公式
贝叶斯公式为：$$ P(A|B) = \frac{P(B|A) \ast P(A)}{P(B)}$$
其推导过程如下：
$$ P (A \cap B) = P (B \cap A) $$</description>
    </item>
    
  </channel>
</rss>